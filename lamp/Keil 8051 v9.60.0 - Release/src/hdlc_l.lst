C51 COMPILER V9.60.0.0   HDLC_L                                                            02/27/2023 00:24:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HDLC_L
OBJECT MODULE PLACED IN .\src\hdlc_l.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\elass\S
                    -implicityStudio\v5_workspace\lamp_2\src\hdlc_l.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) 
                    -OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\elass\SimplicityStudio\v5_workspace\lamp
                    -_2\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/Simplicity
                    -Studio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB52/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5/
                    -/Device/EFM8BB52/peripheral_driver/inc) REGFILE(lamp_2.ORC) PRINT(.\src\hdlc_l.lst) COND PAGEWIDTH(120) PAGELENGTH(65) O
                    -BJECT(.\src\hdlc_l.OBJ)

line level    source

   1          #include <SI_EFM8BB52_Register_Enums.h>
   2          #include "hdlc_l.h"
   3          #include "state_machine.h"
   4          
   5          
   6          #define HDLC_L_START_FLAG 0x7E
   7          #define HDLC_L_END_FLAG 0x7F
   8          #define STUFFING_BYTE 0x7D
   9          #define STUFFING_MASK 0x20
  10          
  11          #define HDLC_L_CRC_SEED 0xFFFF
  12          #define HDLC_L_CRC_POLY 0x1021
  13          #define HDLC_L_PACKET_MIN_SIZE 3 // Fixed by protocol (control byte + crc bytes)
  14          #define INFO_FIELD_MAX_SIZE 10 // Variable
  15          #define PACKET_MAX_SIZE HDLC_L_PACKET_MIN_SIZE + INFO_FIELD_MAX_SIZE
  16          
  17          #define NO_RECEPTION 0xFF
  18          
  19          typedef enum {
  20              HDLC_L_CLEAR,
  21              HDLC_L_INVALID_PACKET_SIZE,
  22              HDLC_L_CRC_MISMATCH,
  23              HDLC_L_INVALID_CONTROL,
  24              HDLC_L_RECEIVE_OVERFLOW,
  25              HDLC_L_TRANSMIT_OVERFLOW
  26          } hdlc_l_control_field_values;
  27          
  28          
  29          
  30          
  31          uint8_t in_packet_index = NO_RECEPTION; // Current index of in_packet It is 0xFF till start flag is seen
  32          uint8_t in_packet_size = 0; // Size of in_packet
  33          uint8_t xdata in_packet[PACKET_MAX_SIZE]; // Packet being received
  34          uint8_t receive_overflow_flag = 0; // in_packet overflowed
  35          
  36          uint8_t out_packet_index = 0; // Current index of out_packet
  37          uint8_t out_packet_size = 0; // Size of out_packet
  38          uint8_t xdata out_packet[PACKET_MAX_SIZE]; // Packet being transmitted
  39          uint8_t start_flag_sent = 0; // Start flag was sent
  40          uint8_t sending_byte_to_be_stuffed = 0; // current next byte is to be stuffed
  41          uint8_t end_flag_sent = 0; // End flag was sent
  42          
  43          /*
  44           Computes the CRC of an array of bytes using the same algorithm used by the
  45           CRC module of the EFM8BB52. CRC16-CCITT with seed 0xFFFF, and polynomial 0x1021
  46           with no reflection of xor or input or output.
  47           */
  48          uint16_t hdlc_l_crc_computation(uint8_t array[], uint8_t array_size){
  49   1          uint16_t crc_value = HDLC_L_CRC_SEED;
  50   1          uint8_t CRC_input;
C51 COMPILER V9.60.0.0   HDLC_L                                                            02/27/2023 00:24:44 PAGE 2   

  51   1      
  52   1          uint8_t array_byte; // array loop counter
  53   1          uint8_t i; // bit loop counter
  54   1      
  55   1          // Update CRC with each byte in the array
  56   1          for(array_byte = 0; array_byte < array_size; array_byte++){
  57   2              CRC_input = array[array_byte];
  58   2      
  59   2              crc_value = crc_value ^ (CRC_input << 8);
  60   2      
  61   2              // Update CRC with each bit of the input byte
  62   2              for (i = 0; i < 8; i++){
  63   3      
  64   3                // Check if the MSB bit of crc_value is 1 to see if it can be
  65   3                // divided by the polynomial
  66   3                if (crc_value & (1 << 15)){
  67   4                    // Shift then divide
  68   4                    crc_value = crc_value << 1;
  69   4                    crc_value ^= HDLC_L_CRC_POLY;
  70   4                }
  71   3                else {
  72   4                    // Shift only
  73   4                    crc_value = crc_value << 1;
  74   4                }
  75   3              }
  76   2          }
  77   1      
  78   1          return crc_value;
  79   1      }
  80          
  81          // Compute crc of an hdlc_l_packet over control and info fields and check if it
  82          // does not match the value within the packet
  83          uint8_t hdlc_l_check_packet_crc_mismatch(uint8_t packet[], uint8_t packet_size){
  84   1      
  85   1        uint16_t packet_crc_computed = hdlc_l_crc_computation(packet, packet_size-2);
  86   1      
  87   1        uint16_t packet_crc = (packet[packet_size-2] << 8) + packet[packet_size-1];
  88   1      
  89   1        return (packet_crc_computed != packet_crc);
  90   1      }
  91          
  92          // Start transmission of hdlc_l packet from start
  93          void hdlc_l_transmit(){
  94   1        // Put index of transmission at start of out_packet
  95   1        out_packet_index = 0;
  96   1        start_flag_sent = 0;
  97   1        end_flag_sent = 0;
  98   1        // Trigger transmission by raising the UART0 transmission flag
  99   1        SBUF0 |= SCON0_TI__BMASK;
 100   1      }
 101          
 102          // Take the control and info fields of a packet and add the rest to make it a full
 103          // packet before transmission (start/end flags and CRC)
 104          void hdlc_l_pack_and_send_packet(){
 105   1        uint16_t packet_crc;
 106   1        // Compute and add the crc to the packet
 107   1        packet_crc = hdlc_l_crc_computation(out_packet, out_packet_size);
 108   1        out_packet[out_packet_size] = packet_crc / (1 << 8);
 109   1        out_packet[out_packet_size + 1] = packet_crc % (1 << 8);
 110   1        out_packet_size += 2;
 111   1        // Start transmission of out_packet
 112   1        hdlc_l_transmit();
 113   1      }
C51 COMPILER V9.60.0.0   HDLC_L                                                            02/27/2023 00:24:44 PAGE 3   

 114          
 115          // Form an info packet out of an array of info bytes
 116          void hdlc_l_send_info_packet(uint8_t send_info_bytes[], uint8_t send_info_bytes_size){
 117   1        uint8_t i;
 118   1      
 119   1        // Discard packet if it would lead to buffer overflow
 120   1        if (send_info_bytes_size > INFO_FIELD_MAX_SIZE){
 121   2            hdlc_l_send_control_packet(HDLC_L_TRANSMIT_OVERFLOW);
 122   2            return;
 123   2        }
 124   1      
 125   1        // Load control byte into packet
 126   1        out_packet[0] = HDLC_L_CLEAR;
 127   1        // Load info bytes into packet
 128   1        for(i = 0; i < send_info_bytes_size; i++)
 129   1          out_packet[i+1] = send_info_bytes[i];
 130   1        out_packet_size = send_info_bytes_size+1;
 131   1        hdlc_l_pack_and_send_packet();
 132   1      }
 133          
 134          // Form a control packet out of a control byte
 135          void hdlc_l_send_control_packet(uint8_t control_byte){
 136   1        // Load control byte into packet
 137   1        out_packet[0] = control_byte;
 138   1        out_packet_size = 1;
 139   1        hdlc_l_pack_and_send_packet();
 140   1      }
 141          
 142          
 143          // Make a copy of in_packet's info field into an array
 144          void hdlc_l_load_received_info_bytes(uint8_t received_info_bytes[] , uint8_t* received_info_bytes_size){
 145   1        int i;
 146   1        *received_info_bytes_size = in_packet_size-HDLC_L_PACKET_MIN_SIZE;
 147   1      
 148   1        // Get info bytes from packet
 149   1        for(i = 0; i < *received_info_bytes_size; i++)
 150   1          received_info_bytes[i] = in_packet[i+1];
 151   1      
 152   1      }
 153          
 154          void destuff_in_packet(){
 155   1        // Start destuffing packet data starting after start flag with two cursors
 156   1        uint8_t i = 0;
 157   1        uint8_t j;
 158   1      
 159   1        // Run j cursor as an index over packet
 160   1        for(j = 0; j < in_packet_size; j++){
 161   2            // If stuffing byte found, move j cursor ahead to fetch
 162   2            // stuffed byte and destuff it. This reduces the packet size by 1
 163   2            if (in_packet[j] == STUFFING_BYTE)
 164   2                in_packet[i] = in_packet[++j] ^ STUFFING_MASK;
 165   2            else
 166   2                in_packet[i] = in_packet[j];
 167   2            // Move cursors
 168   2            i++;
 169   2        }
 170   1        // Update in_packet size to where i cursor ends
 171   1        in_packet_size = i;
 172   1      }
 173          
 174          
 175          // HDLC-L communication protocol over UART0
 176          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
C51 COMPILER V9.60.0.0   HDLC_L                                                            02/27/2023 00:24:44 PAGE 4   

 177            {
 178   1        uint8_t received_packet_byte;
 179   1        uint8_t control_byte;
 180   1        uint8_t sending_byte;
 181   1      
 182   1        // Change SFR page to that of UART0
 183   1        uint8_t SFRPAGE_save = SFRPAGE;
 184   1        SFRPAGE = 0x00;
 185   1      
 186   1        // Interrupt reason: byte transmitted
 187   1        if ((SCON0 & SCON0_TI__BMASK)){
 188   2            // Lower transmission flag
 189   2            SCON0 &= ~SCON0_TI__BMASK;
 190   2      
 191   2            // Check if start flag has not been sent yet
 192   2            if (!start_flag_sent){
 193   3                start_flag_sent = 1;
 194   3                SBUF0 = HDLC_L_START_FLAG;
 195   3            }
 196   2      
 197   2            // Check if there is still a byte to send in the packet
 198   2            else if (out_packet_index < out_packet_size){
 199   3      
 200   3                sending_byte = out_packet[out_packet_index];
 201   3      
 202   3                // Check if there is a need for stuffing. This happens when the byte
 203   3                // to be transmitted is not a start or end flag, and it has the same value
 204   3                // as a start or end flag or a stuffing byte. And it has not already been
 205   3                // stuffed
 206   3                if ((out_packet_index !=0) && (out_packet_index != out_packet_size-1) &&
 207   3                    ((sending_byte == HDLC_L_START_FLAG) ||
 208   3                        (sending_byte == HDLC_L_END_FLAG) ||
 209   3                        (sending_byte == STUFFING_BYTE) )){
 210   4                    if(!sending_byte_to_be_stuffed){
 211   5                        // Marking byte to be stuffed and sending stuffing byte
 212   5                        sending_byte_to_be_stuffed = 1;
 213   5                        SBUF0 = STUFFING_BYTE;
 214   5                    }
 215   4                    else {
 216   5                        // Removing mark for stuffing and sending stuffed byte
 217   5                        sending_byte_to_be_stuffed = 0;
 218   5                        SBUF0 = sending_byte ^ STUFFING_MASK;
 219   5                        // Increment out packet index
 220   5                        out_packet_index += 1;
 221   5                    }
 222   4                }
 223   3                else{
 224   4                    // Send next out packet byte over UART0
 225   4                    SBUF0 = sending_byte;
 226   4                    // Increment out packet index
 227   4                    out_packet_index += 1;
 228   4                }
 229   3      
 230   3            }
 231   2            // Check if end flag has not been sent yet
 232   2            else if (!end_flag_sent){
 233   3                end_flag_sent = 1;
 234   3                SBUF0 = HDLC_L_END_FLAG;
 235   3            }
 236   2        }
 237   1      
 238   1        // Interrupt reason: byte received
 239   1        else{
C51 COMPILER V9.60.0.0   HDLC_L                                                            02/27/2023 00:24:44 PAGE 5   

 240   2            // Get the received byte
 241   2            received_packet_byte = SBUF0;
 242   2      
 243   2            // Receiving a byte discontinues transmission
 244   2            out_packet_size = 0;
 245   2      
 246   2            // Discard packet (reset reading) if it would lead to buffer overflow and raise the
 247   2            // receive buffer overflow flag so a message is sent about it
 248   2            if (in_packet_index == PACKET_MAX_SIZE){
 249   3                in_packet_index = 0;
 250   3                receive_overflow_flag = 1;
 251   3            }
 252   2      
 253   2            // If start flag, reset reception buffer
 254   2            if (received_packet_byte == HDLC_L_START_FLAG){
 255   3                in_packet_index = 0;
 256   3            }
 257   2            // If start flag already seen
 258   2            else if (in_packet_index != NO_RECEPTION){
 259   3      
 260   3                // If end flag, finalize reception
 261   3                if (received_packet_byte == HDLC_L_END_FLAG){
 262   4                    // Store size of in_packet
 263   4                    in_packet_size = in_packet_index;
 264   4                    // Stop reception
 265   4                    in_packet_index = NO_RECEPTION;
 266   4                    // Check if receive buffer overflowed
 267   4                    if (receive_overflow_flag){
 268   5                        hdlc_l_send_control_packet(HDLC_L_RECEIVE_OVERFLOW);
 269   5                        receive_overflow_flag = 0;
 270   5                    }
 271   4                    // Check if packet does not have the minimum size
 272   4                    else if (in_packet_size < HDLC_L_PACKET_MIN_SIZE){
 273   5                        hdlc_l_send_control_packet(HDLC_L_INVALID_PACKET_SIZE);
 274   5                    }
 275   4                    else{
 276   5                        // Destuff bytes of packet
 277   5                        destuff_in_packet();
 278   5                        control_byte = in_packet[0];
 279   5                        // Check if there is a CRC mismatch (asking for retransmission)
 280   5                        if (hdlc_l_check_packet_crc_mismatch(in_packet, in_packet_size)){
 281   6                            hdlc_l_send_control_packet(HDLC_L_CRC_MISMATCH);
 282   6                        }
 283   5                        // Check if the control field has invalid values
 284   5                        else if (control_byte != HDLC_L_CLEAR && control_byte != HDLC_L_CRC_MISMATCH){
 285   6                            hdlc_l_send_control_packet(HDLC_L_INVALID_CONTROL);
 286   6                        }
 287   5                        // Check if the control field is asking for a retransmission due to CRC mismatch
 288   5                        else if (control_byte == HDLC_L_CRC_MISMATCH){
 289   6                            // Start retransmission of out_packet
 290   6                            hdlc_l_transmit();
 291   6                        }
 292   5                        // Packet data is ready, forward command to state machine's command handler
 293   5                        // and disable UART0 interrupt to avoid modifying in_packet or using out_packet
 294   5                        // while the main state machine is modifying them
 295   5                        else{
 296   6                            IE &= ~IE_ES0__BMASK; // IE is on all SFR pages, so no need to change the SFR page
 297   6                            current_event = EV_COMMAND;
 298   6                        }
 299   5                    }
 300   4      
 301   4                }
 302   3                else {
C51 COMPILER V9.60.0.0   HDLC_L                                                            02/27/2023 00:24:44 PAGE 6   

 303   4                    // Add received byte to in_packet and increment in_packet index
 304   4                    in_packet[in_packet_index] = received_packet_byte;
 305   4                    in_packet_index += 1;
 306   4                }
 307   3            }
 308   2        }
 309   1      
 310   1          // Restore SFR page
 311   1          SFRPAGE = SFRPAGE_save;
 312   1        }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    782    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     26    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
