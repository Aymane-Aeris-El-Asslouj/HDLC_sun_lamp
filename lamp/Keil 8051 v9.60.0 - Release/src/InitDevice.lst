C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\elass\S
                    -implicityStudio\v5_workspace\lamp_2\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY
                    -(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\elass\SimplicityStudio\v5_workspace\
                    -lamp_2\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/Simpli
                    -cityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB52/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.
                    -2.5//Device/EFM8BB52/peripheral_driver/inc) REGFILE(lamp_2.ORC) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENG
                    -TH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB52_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        // Save the SFRPAGE
  27   1        uint8_t SFRPAGE_save = SFRPAGE;
  28   1        WDT_0_enter_DefaultMode_from_RESET ();
  29   1        PORTS_0_enter_DefaultMode_from_RESET ();
  30   1        PORTS_2_enter_DefaultMode_from_RESET ();
  31   1        PORTS_3_enter_DefaultMode_from_RESET ();
  32   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  33   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  34   1        CIP51_0_enter_DefaultMode_from_RESET ();
  35   1        TIMER01_0_enter_DefaultMode_from_RESET ();
  36   1        TIMER16_2_enter_DefaultMode_from_RESET ();
  37   1        TIMER16_3_enter_DefaultMode_from_RESET ();
  38   1        TIMER16_4_enter_DefaultMode_from_RESET ();
  39   1        TIMER_SETUP_0_enter_DefaultMode_from_RESET ();
  40   1        PWM_0_enter_DefaultMode_from_RESET ();
  41   1        SMBUS_0_enter_DefaultMode_from_RESET ();
  42   1        UART_0_enter_DefaultMode_from_RESET ();
  43   1        EXTINT_0_enter_DefaultMode_from_RESET ();
  44   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  45   1        // Restore the SFRPAGE
  46   1        SFRPAGE = SFRPAGE_save;
  47   1        // [Config Calls]$
  48   1      
  49   1      }
  50          
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 2   

  51          extern void
  52          WDT_0_enter_DefaultMode_from_RESET (void)
  53          {
  54   1        // $[Watchdog Timer Init Variable Declarations]
  55   1        uint32_t i;
  56   1        bool ea;
  57   1        // [Watchdog Timer Init Variable Declarations]$
  58   1      
  59   1        // $[WDTCN - Watchdog Timer Control]
  60   1        SFRPAGE = 0x00;
  61   1      
  62   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  63   1        WDTCN = 0xA5;
  64   1      
  65   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  66   1        for (i = 0; i < (2 * 3062500UL) / (80000 * 3); i++)
  67   1          {
  68   2            NOP ();
  69   2          }
  70   1      
  71   1        // Disable WDT
  72   1        ea = IE_EA;
  73   1        IE_EA = 0;
  74   1        WDTCN = 0xDE;
  75   1        WDTCN = 0xAD;
  76   1        IE_EA = ea;
  77   1      
  78   1        // [WDTCN - Watchdog Timer Control]$
  79   1      
  80   1      }
  81          
  82          extern void
  83          PORTS_0_enter_DefaultMode_from_RESET (void)
  84          {
  85   1        // $[P0 - Port 0 Pin Latch]
  86   1        // [P0 - Port 0 Pin Latch]$
  87   1      
  88   1        // $[P0MDOUT - Port 0 Output Mode]
  89   1        /***********************************************************************
  90   1         - P0.0 output is open-drain
  91   1         - P0.1 output is open-drain
  92   1         - P0.2 output is push-pull
  93   1         - P0.3 output is push-pull
  94   1         - P0.4 output is push-pull
  95   1         - P0.5 output is open-drain
  96   1         - P0.6 output is open-drain
  97   1         - P0.7 output is open-drain
  98   1         ***********************************************************************/
  99   1        P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 100   1            | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__PUSH_PULL | P0MDOUT_B4__PUSH_PULL
 101   1            | P0MDOUT_B5__OPEN_DRAIN | P0MDOUT_B6__OPEN_DRAIN
 102   1            | P0MDOUT_B7__OPEN_DRAIN;
 103   1        // [P0MDOUT - Port 0 Output Mode]$
 104   1      
 105   1        // $[P0MDIN - Port 0 Input Mode]
 106   1        /***********************************************************************
 107   1         - P0.0 pin is configured for digital mode
 108   1         - P0.1 pin is configured for digital mode
 109   1         - P0.2 pin is configured for digital mode
 110   1         - P0.3 pin is configured for digital mode
 111   1         - P0.4 pin is configured for digital mode
 112   1         - P0.5 pin is configured for digital mode
 113   1         - P0.6 pin is configured for digital mode
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 3   

 114   1         - P0.7 pin is configured for analog mode
 115   1         ***********************************************************************/
 116   1        P0MDIN = P0MDIN_B0__DIGITAL | P0MDIN_B1__DIGITAL | P0MDIN_B2__DIGITAL
 117   1            | P0MDIN_B3__DIGITAL | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 118   1            | P0MDIN_B6__DIGITAL | P0MDIN_B7__ANALOG;
 119   1        // [P0MDIN - Port 0 Input Mode]$
 120   1      
 121   1        // $[P0SKIP - Port 0 Skip]
 122   1        /***********************************************************************
 123   1         - P0.0 pin is not skipped by the crossbar
 124   1         - P0.1 pin is not skipped by the crossbar
 125   1         - P0.2 pin is not skipped by the crossbar
 126   1         - P0.3 pin is not skipped by the crossbar
 127   1         - P0.4 pin is not skipped by the crossbar
 128   1         - P0.5 pin is not skipped by the crossbar
 129   1         - P0.6 pin is skipped by the crossbar
 130   1         - P0.7 pin is not skipped by the crossbar
 131   1         ***********************************************************************/
 132   1        P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__NOT_SKIPPED
 133   1            | P0SKIP_B2__NOT_SKIPPED | P0SKIP_B3__NOT_SKIPPED | P0SKIP_B4__NOT_SKIPPED
 134   1            | P0SKIP_B5__NOT_SKIPPED | P0SKIP_B6__SKIPPED | P0SKIP_B7__NOT_SKIPPED;
 135   1        // [P0SKIP - Port 0 Skip]$
 136   1      
 137   1        // $[P0MASK - Port 0 Mask]
 138   1        // [P0MASK - Port 0 Mask]$
 139   1      
 140   1        // $[P0MAT - Port 0 Match]
 141   1        // [P0MAT - Port 0 Match]$
 142   1      
 143   1      }
 144          
 145          extern void
 146          PBCFG_0_enter_DefaultMode_from_RESET (void)
 147          {
 148   1        // $[XBR2 - Port I/O Crossbar 2]
 149   1        /***********************************************************************
 150   1         - Weak Pullups enabled 
 151   1         - Crossbar enabled
 152   1         - PWM single ended output for all enabled channels
 153   1         - UART1 I/O unavailable at Port pin
 154   1         - UART1 RTS1 unavailable at Port pin
 155   1         - UART1 CTS1 unavailable at Port pin
 156   1         - PWM0 Ch0 and Ch1 routed to Port pin
 157   1         ***********************************************************************/
 158   1        SFRPAGE = 0x00;
 159   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 160   1            | XBR2_PWMDE__SINGLE | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 161   1            | XBR2_URT1CTSE__DISABLED | XBR2_PWME__PWM0CH01;
 162   1        // [XBR2 - Port I/O Crossbar 2]$
 163   1      
 164   1        // $[PRTDRV - Port Drive Strength]
 165   1        // [PRTDRV - Port Drive Strength]$
 166   1      
 167   1        // $[XBR0 - Port I/O Crossbar 0]
 168   1        /***********************************************************************
 169   1         - UART0 TX0, RX0 routed to Port pins P0.4 and P0.5
 170   1         - SPI I/O unavailable at Port pins
 171   1         - SMBus 0 I/O routed to Port pins
 172   1         - CP0 unavailable at Port pin
 173   1         - Asynchronous CP0 unavailable at Port pin
 174   1         - CP1 unavailable at Port pin
 175   1         - Asynchronous CP1 unavailable at Port pin
 176   1         - SYSCLK unavailable at Port pin
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 4   

 177   1         ***********************************************************************/
 178   1        XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 179   1            | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 180   1            | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 181   1        // [XBR0 - Port I/O Crossbar 0]$
 182   1      
 183   1        // $[XBR1 - Port I/O Crossbar 1]
 184   1        // [XBR1 - Port I/O Crossbar 1]$
 185   1      
 186   1      }
 187          
 188          extern void
 189          CLOCK_0_enter_DefaultMode_from_RESET (void)
 190          {
 191   1        // $[HFOSC0 49 and 49/1.5 MHz Oscillator Setup]
 192   1        // Ensure SYSCLK is > 24 MHz before switching to 49 MHz or 49/1.5 MHz Oscillator
 193   1        CLKSEL = CLKSEL_CLKSL__HFOSC0_clk24p5 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 194   1        while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 195   1          ;
 196   1        // [HFOSC0 49 and 49/1.5 MHz Oscillator Setup]$
 197   1      
 198   1        // $[CLKSEL - Clock Select]
 199   1        /***********************************************************************
 200   1         - Clock derived from the Internal High Frequency Oscillator 49 MHz
 201   1         - SYSCLK is equal to selected clock source divided by 1
 202   1         ***********************************************************************/
 203   1        CLKSEL = CLKSEL_CLKSL__HFOSC0_clk49 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 204   1        while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 205   1          ;
 206   1        // [CLKSEL - Clock Select]$
 207   1      
 208   1        // $[CLKGRP0 - Clock Group 0]
 209   1        // [CLKGRP0 - Clock Group 0]$
 210   1      
 211   1      }
 212          
 213          extern void
 214          CIP51_0_enter_DefaultMode_from_RESET (void)
 215          {
 216   1        // $[PFE0CN - Prefetch Engine Control]
 217   1        /***********************************************************************
 218   1         - Enables the Prefetch Engine when SYSCLK < 50 MHz
 219   1         ***********************************************************************/
 220   1        SFRPAGE = 0x10;
 221   1        PFE0CN = PFE0CN_FLRT__SYSCLK_BELOW_50_MHZ;
 222   1        // [PFE0CN - Prefetch Engine Control]$
 223   1      
 224   1      }
 225          
 226          extern void
 227          PWM_0_enter_DefaultMode_from_RESET (void)
 228          {
 229   1        // $[Stop PWM]
 230   1        SFRPAGE = 0x10;
 231   1        PWMCFG1 &= ~(PWMCFG1_PWMEN__BMASK);
 232   1        // [Stop PWM]$
 233   1      
 234   1        // $[PWMCKDIV - PWMCKDIV]
 235   1        // [PWMCKDIV - PWMCKDIV]$
 236   1      
 237   1        // $[PWMCFG0 - PWM Configuration 0]
 238   1        /***********************************************************************
 239   1         - Enable clock to the PWM module
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 5   

 240   1         - PWM will operate in Edge-aligned mode
 241   1         - No channels will be synchronously updated
 242   1         - PWM will continue running on breakpoints in debug mode
 243   1         - Rising edge on the enabled external trigger will start PWM counter
 244   1         - Disable Kill0 signal to halt the PWM
 245   1         - Disable Kill1 signal to halt the PWM
 246   1         ***********************************************************************/
 247   1        PWMCFG0 = PWMCFG0_PWMCLKEN__ENABLE | PWMCFG0_PWMMODE__EDGE
 248   1            | PWMCFG0_SYNCUPD__NOSYNCUPD | PWMCFG0_DBGSTLEN__DISABLE
 249   1            | PWMCFG0_TRGESEL__REDGE | PWMCFG0_KILL0EN__DISABLE
 250   1            | PWMCFG0_KILL1EN__DISABLE;
 251   1        // [PWMCFG0 - PWM Configuration 0]$
 252   1      
 253   1        // $[PWMCFG1 - PWM Configuration 1]
 254   1        // [PWMCFG1 - PWM Configuration 1]$
 255   1      
 256   1        // $[PWMCFG2 - PWM Configuration 2]
 257   1        // [PWMCFG2 - PWM Configuration 2]$
 258   1      
 259   1        // $[PWMCFG3 - PWMCFG3]
 260   1        // [PWMCFG3 - PWMCFG3]$
 261   1      
 262   1        // $[PWML - PWML]
 263   1        // [PWML - PWML]$
 264   1      
 265   1        // $[PWMH - PWMH]
 266   1        // [PWMH - PWMH]$
 267   1      
 268   1        // $[PWMLIML - PWMLIML]
 269   1        /***********************************************************************
 270   1         - PWM Counter Limit LSB = 0xFF
 271   1         ***********************************************************************/
 272   1        PWMLIML = (0xFF << PWMLIML_PWMLIML__SHIFT);
 273   1        // [PWMLIML - PWMLIML]$
 274   1      
 275   1        // $[PWMLIMH - PWMLIMH]
 276   1        /***********************************************************************
 277   1         - PWM Counter Limit MSB = 0xFF
 278   1         ***********************************************************************/
 279   1        PWMLIMH = (0xFF << PWMLIMH_PWMLIMH__SHIFT);
 280   1        // [PWMLIMH - PWMLIMH]$
 281   1      
 282   1        // $[PWMDTIPLIM - PWMDTIPLIM]
 283   1        // [PWMDTIPLIM - PWMDTIPLIM]$
 284   1      
 285   1        // $[PWMDTINLIM - PWMDTINLIM]
 286   1        // [PWMDTINLIM - PWMDTINLIM]$
 287   1      
 288   1        // $[PWMIE - PWMIE]
 289   1        // [PWMIE - PWMIE]$
 290   1      
 291   1        // Set the compare registers of channels 0 and 1 to sensible initial values.
 292   1        // This is done synchronously, although that's not strictly necessary at this
 293   1        // time since we haven't enabled the peripheral yet.
 294   1        // See pwm_set() for further information.
 295   1        PWMCFG0 &= ~PWMCFG0_SYNCUPD__FMASK;
 296   1        PWMCPUDL0 = DEFAULT_PWM_CHANNEL0 & 0xff;
 297   1        PWMCPUDH0 = (DEFAULT_PWM_CHANNEL0 >> 8) & 0xff;
 298   1        PWMCPUDL1 = DEFAULT_PWM_CHANNEL1 & 0xff;
 299   1        PWMCPUDH1 = (DEFAULT_PWM_CHANNEL1 >> 8) & 0xff;
 300   1        PWMCFG0 |= PWMCFG0_SYNCUPD__CH0CH1CH2;
 301   1      
 302   1        // Enable output on channels 0 and 1.
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 6   

 303   1        PWMCFG2 |= PWMCFG2_CH0EN__BMASK;
 304   1        PWMCFG2 |= PWMCFG2_CH1EN__BMASK;
 305   1      
 306   1        // $[PWM On]
 307   1        PWMCFG1 |= PWMCFG1_PWMEN__ENABLE;
 308   1        // [PWM On]$
 309   1      
 310   1      }
 311          
 312          extern void
 313          PORTS_3_enter_DefaultMode_from_RESET (void)
 314          {
 315   1        // $[P3 - Port 3 Pin Latch]
 316   1        // [P3 - Port 3 Pin Latch]$
 317   1      
 318   1        // $[P3MDOUT - Port 3 Output Mode]
 319   1        // [P3MDOUT - Port 3 Output Mode]$
 320   1      
 321   1        // $[P3MDIN - Port 3 Input Mode]
 322   1        /***********************************************************************
 323   1         - P3.0 pin is configured for analog mode
 324   1         - P3.1 pin is configured for analog mode
 325   1         - P3.2 pin is configured for analog mode
 326   1         - P3.3 pin is configured for digital mode
 327   1         - P3.4 pin is configured for analog mode
 328   1         - P3.7 pin is configured for analog mode
 329   1         ***********************************************************************/
 330   1        P3MDIN = P3MDIN_B0__ANALOG | P3MDIN_B1__ANALOG | P3MDIN_B2__ANALOG
 331   1            | P3MDIN_B3__DIGITAL | P3MDIN_B4__ANALOG | P3MDIN_B7__ANALOG;
 332   1        // [P3MDIN - Port 3 Input Mode]$
 333   1      
 334   1      }
 335          
 336          extern void
 337          PORTS_1_enter_DefaultMode_from_RESET (void)
 338          {
 339   1        // $[P1 - Port 1 Pin Latch]
 340   1        // [P1 - Port 1 Pin Latch]$
 341   1      
 342   1        // $[P1MDOUT - Port 1 Output Mode]
 343   1        /***********************************************************************
 344   1         - P1.0 output is open-drain
 345   1         - P1.1 output is open-drain
 346   1         - P1.2 output is open-drain
 347   1         - P1.3 output is open-drain
 348   1         - P1.4 output is push-pull
 349   1         - P1.5 output is open-drain
 350   1         - P1.6 output is open-drain
 351   1         - P1.7 output is open-drain
 352   1         ***********************************************************************/
 353   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 354   1            | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__PUSH_PULL
 355   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN
 356   1            | P1MDOUT_B7__OPEN_DRAIN;
 357   1        // [P1MDOUT - Port 1 Output Mode]$
 358   1      
 359   1        // $[P1MDIN - Port 1 Input Mode]
 360   1        /***********************************************************************
 361   1         - P1.0 pin is configured for analog mode
 362   1         - P1.1 pin is configured for analog mode
 363   1         - P1.2 pin is configured for analog mode
 364   1         - P1.3 pin is configured for analog mode
 365   1         - P1.4 pin is configured for digital mode
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 7   

 366   1         - P1.5 pin is configured for analog mode
 367   1         - P1.6 pin is configured for analog mode
 368   1         - P1.7 pin is configured for analog mode
 369   1         ***********************************************************************/
 370   1        P1MDIN = P1MDIN_B0__ANALOG | P1MDIN_B1__ANALOG | P1MDIN_B2__ANALOG
 371   1            | P1MDIN_B3__ANALOG | P1MDIN_B4__DIGITAL | P1MDIN_B5__ANALOG
 372   1            | P1MDIN_B6__ANALOG | P1MDIN_B7__ANALOG;
 373   1        // [P1MDIN - Port 1 Input Mode]$
 374   1      
 375   1        // $[P1SKIP - Port 1 Skip]
 376   1        // [P1SKIP - Port 1 Skip]$
 377   1      
 378   1        // $[P1MASK - Port 1 Mask]
 379   1        // [P1MASK - Port 1 Mask]$
 380   1      
 381   1        // $[P1MAT - Port 1 Match]
 382   1        // [P1MAT - Port 1 Match]$
 383   1      
 384   1      }
 385          
 386          extern void
 387          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 388          {
 389   1        // $[EIE1 - Extended Interrupt Enable 1]
 390   1        /***********************************************************************
 391   1         - Disable ADC0 Conversion Complete interrupt
 392   1         - Disable ADC0 Window Comparison interrupt
 393   1         - Disable CP0 interrupts
 394   1         - Disable CP1 interrupts
 395   1         - Disable all Port Match interrupts
 396   1         - Disable all PCA0 interrupts
 397   1         - Enable interrupt requests generated by SMB0
 398   1         - Disable Timer 3 interrupts
 399   1         ***********************************************************************/
 400   1        EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 401   1            | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 402   1            | EIE1_ESMB0__ENABLED | EIE1_ET3__DISABLED;
 403   1        // [EIE1 - Extended Interrupt Enable 1]$
 404   1      
 405   1        // $[EIE2 - Extended Interrupt Enable 2]
 406   1        // [EIE2 - Extended Interrupt Enable 2]$
 407   1      
 408   1        // $[EIP1H - Extended Interrupt Priority 1 High]
 409   1        // [EIP1H - Extended Interrupt Priority 1 High]$
 410   1      
 411   1        // $[EIP1 - Extended Interrupt Priority 1 Low]
 412   1        // [EIP1 - Extended Interrupt Priority 1 Low]$
 413   1      
 414   1        // $[EIP2 - Extended Interrupt Priority 2]
 415   1        // [EIP2 - Extended Interrupt Priority 2]$
 416   1      
 417   1        // $[EIP2H - Extended Interrupt Priority 2 High]
 418   1        // [EIP2H - Extended Interrupt Priority 2 High]$
 419   1      
 420   1        // $[IE - Interrupt Enable]
 421   1        /***********************************************************************
 422   1         - Enable each interrupt according to its individual mask setting
 423   1         - Enable interrupt requests generated by the INT0 input
 424   1         - Disable external interrupt 1
 425   1         - Disable all SPI0 interrupts
 426   1         - Disable all Timer 0 interrupt
 427   1         - Disable all Timer 1 interrupt
 428   1         - Disable Timer 2 interrupt
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 8   

 429   1         - Enable UART0 interrupt
 430   1         ***********************************************************************/
 431   1        IE = IE_EA__ENABLED | IE_EX0__ENABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 432   1            | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__DISABLED
 433   1            | IE_ES0__ENABLED;
 434   1        // [IE - Interrupt Enable]$
 435   1      
 436   1        // $[IP - Interrupt Priority]
 437   1        // [IP - Interrupt Priority]$
 438   1      
 439   1        // $[IPH - Interrupt Priority High]
 440   1        // [IPH - Interrupt Priority High]$
 441   1      
 442   1      }
 443          
 444          extern void
 445          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
 446          {
 447   1        // $[CKCON0 - Clock Control 0]
 448   1        /***********************************************************************
 449   1         - System clock divided by 4
 450   1         - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 451   1         - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 452   1         - Timer 2 low byte uses the system clock
 453   1         - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 454   1         - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 455   1         - Timer 1 uses the system clock
 456   1         ***********************************************************************/
 457   1        SFRPAGE = 0x00;
 458   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE
 459   1            | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__SYSCLK
 460   1            | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 461   1            | CKCON0_T1M__SYSCLK;
 462   1        // [CKCON0 - Clock Control 0]$
 463   1      
 464   1        // $[CKCON1 - Clock Control 1]
 465   1        // [CKCON1 - Clock Control 1]$
 466   1      
 467   1        // $[TMOD - Timer 0/1 Mode]
 468   1        /***********************************************************************
 469   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 470   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 471   1         - Timer Mode
 472   1         - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 473   1         - Timer Mode
 474   1         - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 475   1         ***********************************************************************/
 476   1        TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 477   1            | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 478   1        // [TMOD - Timer 0/1 Mode]$
 479   1      
 480   1        // $[TCON - Timer 0/1 Control]
 481   1        /***********************************************************************
 482   1         - INT0 is edge triggered
 483   1         - Start Timer 0 running
 484   1         - Start Timer 1 running
 485   1         ***********************************************************************/
 486   1        TCON |= TCON_IT0__EDGE | TCON_TR0__RUN | TCON_TR1__RUN;
 487   1        // [TCON - Timer 0/1 Control]$
 488   1      
 489   1      }
 490          
 491          extern void
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 9   

 492          TIMER16_2_enter_DefaultMode_from_RESET (void)
 493          {
 494   1        // $[Timer Initialization]
 495   1        // Save Timer Configuration
 496   1        uint8_t TMR2CN0_TR2_save;
 497   1        TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 498   1        // Stop Timer
 499   1        TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 500   1        // [Timer Initialization]$
 501   1      
 502   1        // $[TMR2CN1 - Timer 2 Control 1]
 503   1        // [TMR2CN1 - Timer 2 Control 1]$
 504   1      
 505   1        // $[TMR2CN0 - Timer 2 Control]
 506   1        // [TMR2CN0 - Timer 2 Control]$
 507   1      
 508   1        // $[TMR2H - Timer 2 High Byte]
 509   1        // [TMR2H - Timer 2 High Byte]$
 510   1      
 511   1        // $[TMR2L - Timer 2 Low Byte]
 512   1        // [TMR2L - Timer 2 Low Byte]$
 513   1      
 514   1        // $[TMR2RLH - Timer 2 Reload High Byte]
 515   1        /***********************************************************************
 516   1         - Timer 2 Reload High Byte = 0xFE
 517   1         ***********************************************************************/
 518   1        TMR2RLH = (0xFE << TMR2RLH_TMR2RLH__SHIFT);
 519   1        // [TMR2RLH - Timer 2 Reload High Byte]$
 520   1      
 521   1        // $[TMR2RLL - Timer 2 Reload Low Byte]
 522   1        /***********************************************************************
 523   1         - Timer 2 Reload Low Byte = 0x16
 524   1         ***********************************************************************/
 525   1        TMR2RLL = (0x16 << TMR2RLL_TMR2RLL__SHIFT);
 526   1        // [TMR2RLL - Timer 2 Reload Low Byte]$
 527   1      
 528   1        // $[TMR2CN0]
 529   1        /***********************************************************************
 530   1         - Start Timer 2 running
 531   1         ***********************************************************************/
 532   1        TMR2CN0 |= TMR2CN0_TR2__RUN;
 533   1        // [TMR2CN0]$
 534   1      
 535   1        // $[Timer Restoration]
 536   1        // Restore Timer Configuration
 537   1        TMR2CN0 |= TMR2CN0_TR2_save;
 538   1        // [Timer Restoration]$
 539   1      
 540   1      }
 541          
 542          extern void
 543          TIMER16_3_enter_DefaultMode_from_RESET (void)
 544          {
 545   1        // $[Timer Initialization]
 546   1        // Save Timer Configuration
 547   1        uint8_t TMR3CN0_TR3_save;
 548   1        TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 549   1        // Stop Timer
 550   1        TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 551   1        // [Timer Initialization]$
 552   1      
 553   1        // $[TMR3CN1 - Timer 3 Control 1]
 554   1        // [TMR3CN1 - Timer 3 Control 1]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 10  

 555   1      
 556   1        // $[TMR3CN0 - Timer 3 Control]
 557   1        // [TMR3CN0 - Timer 3 Control]$
 558   1      
 559   1        // $[TMR3H - Timer 3 High Byte]
 560   1        // [TMR3H - Timer 3 High Byte]$
 561   1      
 562   1        // $[TMR3L - Timer 3 Low Byte]
 563   1        // [TMR3L - Timer 3 Low Byte]$
 564   1      
 565   1        // $[TMR3RLH - Timer 3 Reload High Byte]
 566   1        /***********************************************************************
 567   1         - Timer 3 Reload High Byte = 0xF0
 568   1         ***********************************************************************/
 569   1        TMR3RLH = (0xF0 << TMR3RLH_TMR3RLH__SHIFT);
 570   1        // [TMR3RLH - Timer 3 Reload High Byte]$
 571   1      
 572   1        // $[TMR3RLL - Timer 3 Reload Low Byte]
 573   1        /***********************************************************************
 574   1         - Timer 3 Reload Low Byte = 0x0D
 575   1         ***********************************************************************/
 576   1        TMR3RLL = (0x0D << TMR3RLL_TMR3RLL__SHIFT);
 577   1        // [TMR3RLL - Timer 3 Reload Low Byte]$
 578   1      
 579   1        // $[TMR3CN0]
 580   1        /***********************************************************************
 581   1         - Start Timer 3 running
 582   1         ***********************************************************************/
 583   1        TMR3CN0 |= TMR3CN0_TR3__RUN;
 584   1        // [TMR3CN0]$
 585   1      
 586   1        // $[Timer Restoration]
 587   1        // Restore Timer Configuration
 588   1        TMR3CN0 |= TMR3CN0_TR3_save;
 589   1        // [Timer Restoration]$
 590   1      
 591   1      }
 592          
 593          extern void
 594          TIMER16_4_enter_DefaultMode_from_RESET (void)
 595          {
 596   1        // $[Timer Initialization]
 597   1        // Save Timer Configuration
 598   1        uint8_t TMR4CN0_TR4_save;
 599   1        SFRPAGE = 0x10;
 600   1        TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 601   1        // Stop Timer
 602   1        TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 603   1        // [Timer Initialization]$
 604   1      
 605   1        // $[TMR4CN1 - Timer 4 Control 1]
 606   1        // [TMR4CN1 - Timer 4 Control 1]$
 607   1      
 608   1        // $[TMR4CN0 - Timer 4 Control]
 609   1        /***********************************************************************
 610   1         - Timer 4 is clocked by Timer 3 overflows
 611   1         ***********************************************************************/
 612   1        TMR4CN0 &= ~TMR4CN0_T4XCLK__FMASK;
 613   1        TMR4CN0 |= TMR4CN0_T4XCLK__TIMER3;
 614   1        // [TMR4CN0 - Timer 4 Control]$
 615   1      
 616   1        // $[TMR4H - Timer 4 High Byte]
 617   1        // [TMR4H - Timer 4 High Byte]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 11  

 618   1      
 619   1        // $[TMR4L - Timer 4 Low Byte]
 620   1        // [TMR4L - Timer 4 Low Byte]$
 621   1      
 622   1        // $[TMR4RLH - Timer 4 Reload High Byte]
 623   1        // [TMR4RLH - Timer 4 Reload High Byte]$
 624   1      
 625   1        // $[TMR4RLL - Timer 4 Reload Low Byte]
 626   1        // [TMR4RLL - Timer 4 Reload Low Byte]$
 627   1      
 628   1        // $[TMR4CN0]
 629   1        /***********************************************************************
 630   1         - Start Timer 4 running
 631   1         ***********************************************************************/
 632   1        TMR4CN0 |= TMR4CN0_TR4__RUN;
 633   1        // [TMR4CN0]$
 634   1      
 635   1        // $[Timer Restoration]
 636   1        // Restore Timer Configuration
 637   1        TMR4CN0 |= TMR4CN0_TR4_save;
 638   1        // [Timer Restoration]$
 639   1      
 640   1      }
 641          
 642          extern void
 643          UART_0_enter_DefaultMode_from_RESET (void)
 644          {
 645   1        // $[SCON0 - UART0 Serial Port Control]
 646   1        /***********************************************************************
 647   1         - UART0 reception enabled
 648   1         - RI is set and an interrupt is generated only when the stop bit is
 649   1         logic 1
 650   1         ***********************************************************************/
 651   1        SCON0 |= SCON0_REN__RECEIVE_ENABLED | SCON0_MCE__MULTI_ENABLED;
 652   1        // [SCON0 - UART0 Serial Port Control]$
 653   1      
 654   1      }
 655          
 656          extern void
 657          TIMER01_0_enter_DefaultMode_from_RESET (void)
 658          {
 659   1      
 660   1        // $[Timer Initialization]
 661   1        //Save Timer Configuration
 662   1        uint8_t TCON_save;
 663   1        SFRPAGE = 0x00;
 664   1        TCON_save = TCON;
 665   1        //Stop Timers
 666   1        TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 667   1      
 668   1        // [Timer Initialization]$
 669   1      
 670   1        // $[TH0 - Timer 0 High Byte]
 671   1        /***********************************************************************
 672   1         - Timer 0 High Byte = 0x86
 673   1         ***********************************************************************/
 674   1        TH0 = (0x86 << TH0_TH0__SHIFT);
 675   1        // [TH0 - Timer 0 High Byte]$
 676   1      
 677   1        // $[TL0 - Timer 0 Low Byte]
 678   1        // [TL0 - Timer 0 Low Byte]$
 679   1      
 680   1        // $[TH1 - Timer 1 High Byte]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 12  

 681   1        /***********************************************************************
 682   1         - Timer 1 High Byte = 0x2B
 683   1         ***********************************************************************/
 684   1        TH1 = (0x2B << TH1_TH1__SHIFT);
 685   1        // [TH1 - Timer 1 High Byte]$
 686   1      
 687   1        // $[TL1 - Timer 1 Low Byte]
 688   1        // [TL1 - Timer 1 Low Byte]$
 689   1      
 690   1        // $[Timer Restoration]
 691   1        //Restore Timer Configuration
 692   1        TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 693   1      
 694   1        // [Timer Restoration]$
 695   1      
 696   1      }
 697          
 698          extern void
 699          SMBUS_0_enter_DefaultMode_from_RESET (void)
 700          {
 701   1        // $[SMB0FCN0 - SMBus0 FIFO Control 0]
 702   1        /***********************************************************************
 703   1         - SMBus 0 interrupts will be generated if RFRQ is set
 704   1         - SMBus 0 interrupts will not be generated when TFRQ is set
 705   1         - RFRQ will be set anytime new data arrives in the RX FIFO 
 706   1         - TFRQ will be set when the TX FIFO is empty
 707   1         ***********************************************************************/
 708   1        SFRPAGE = 0x20;
 709   1        SMB0FCN0 = SMB0FCN0_RFRQE__ENABLED | SMB0FCN0_TFRQE__DISABLED
 710   1            | SMB0FCN0_RXTH__ZERO | SMB0FCN0_TXTH__ZERO;
 711   1        // [SMB0FCN0 - SMBus0 FIFO Control 0]$
 712   1      
 713   1        // $[SMB0RXLN - SMBus0 Receive Length Counter]
 714   1        // [SMB0RXLN - SMBus0 Receive Length Counter]$
 715   1      
 716   1        // $[SMB0ADR - SMBus 0 Slave Address]
 717   1        // [SMB0ADR - SMBus 0 Slave Address]$
 718   1      
 719   1        // $[SMB0ADM - SMBus 0 Slave Address Mask]
 720   1        // [SMB0ADM - SMBus 0 Slave Address Mask]$
 721   1      
 722   1        // $[SMB0TC - SMBus 0 Timing and Pin Control]
 723   1        /***********************************************************************
 724   1         - SDA setup time is 11 SYSCLKs and SDA hold time is 12 SYSCLKs
 725   1         - SCL is mapped to the lower-numbered port pin, and SDA is mapped to the
 726   1         higher-numbered port pin
 727   1         - No additional SDA falling edge recognition delay 
 728   1         ***********************************************************************/
 729   1        SFRPAGE = 0x00;
 730   1        SMB0TC = SMB0TC_DLYEXT__STANDARD | SMB0TC_SWAP__SDA_HIGH_PIN
 731   1            | SMB0TC_SDD__NONE;
 732   1        // [SMB0TC - SMBus 0 Timing and Pin Control]$
 733   1      
 734   1        // $[SMB0CF - SMBus 0 Configuration]
 735   1        /***********************************************************************
 736   1         - Timer 2 Low Byte Overflow
 737   1         - Slave states are inhibited
 738   1         - Enable the SMBus module
 739   1         ***********************************************************************/
 740   1        SMB0CF |= SMB0CF_SMBCS__TIMER2_LOW | SMB0CF_INH__SLAVE_DISABLED
 741   1            | SMB0CF_ENSMB__ENABLED;
 742   1        // [SMB0CF - SMBus 0 Configuration]$
 743   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 13  

 744   1      }
 745          
 746          extern void
 747          PORTS_2_enter_DefaultMode_from_RESET (void)
 748          {
 749   1        // $[P2 - Port 2 Pin Latch]
 750   1        /***********************************************************************
 751   1         - P2.0 is high. Set P2.0 to drive or float high
 752   1         - P2.1 is high. Set P2.1 to drive or float high
 753   1         - P2.2 is high. Set P2.2 to drive or float high
 754   1         - P2.3 is high. Set P2.3 to drive or float high
 755   1         - P2.4 is high. Set P2.4 to drive or float high
 756   1         - P2.5 is high. Set P2.5 to drive or float high
 757   1         - P2.6 is low. Set P2.6 to drive low
 758   1         ***********************************************************************/
 759   1        P2 = P2_B0__HIGH | P2_B1__HIGH | P2_B2__HIGH | P2_B3__HIGH | P2_B4__HIGH
 760   1            | P2_B5__HIGH | P2_B6__LOW;
 761   1        // [P2 - Port 2 Pin Latch]$
 762   1      
 763   1        // $[P2MDOUT - Port 2 Output Mode]
 764   1        /***********************************************************************
 765   1         - P2.0 output is open-drain
 766   1         - P2.1 output is open-drain
 767   1         - P2.2 output is open-drain
 768   1         - P2.3 output is open-drain
 769   1         - P2.4 output is open-drain
 770   1         - P2.5 output is open-drain
 771   1         - P2.6 output is push-pull
 772   1         ***********************************************************************/
 773   1        P2MDOUT = P2MDOUT_B0__OPEN_DRAIN | P2MDOUT_B1__OPEN_DRAIN
 774   1            | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__OPEN_DRAIN | P2MDOUT_B4__OPEN_DRAIN
 775   1            | P2MDOUT_B5__OPEN_DRAIN | P2MDOUT_B6__PUSH_PULL;
 776   1        // [P2MDOUT - Port 2 Output Mode]$
 777   1      
 778   1        // $[P2MDIN - Port 2 Input Mode]
 779   1        /***********************************************************************
 780   1         - P2.0 pin is configured for analog mode
 781   1         - P2.1 pin is configured for analog mode
 782   1         - P2.2 pin is configured for analog mode
 783   1         - P2.3 pin is configured for analog mode
 784   1         - P2.4 pin is configured for analog mode
 785   1         - P2.5 pin is configured for analog mode
 786   1         - P2.6 pin is configured for digital mode
 787   1         ***********************************************************************/
 788   1        SFRPAGE = 0x20;
 789   1        P2MDIN = P2MDIN_B0__ANALOG | P2MDIN_B1__ANALOG | P2MDIN_B2__ANALOG
 790   1            | P2MDIN_B3__ANALOG | P2MDIN_B4__ANALOG | P2MDIN_B5__ANALOG
 791   1            | P2MDIN_B6__DIGITAL;
 792   1        // [P2MDIN - Port 2 Input Mode]$
 793   1      
 794   1        // $[P2SKIP - Port 2 Skip]
 795   1        /***********************************************************************
 796   1         - P2.0 pin is not skipped by the crossbar
 797   1         - P2.1 pin is not skipped by the crossbar
 798   1         - P2.2 pin is not skipped by the crossbar
 799   1         - P2.3 pin is not skipped by the crossbar
 800   1         - P2.4 pin is not skipped by the crossbar
 801   1         - P2.5 pin is not skipped by the crossbar
 802   1         - P2.6 pin is skipped by the crossbar
 803   1         ***********************************************************************/
 804   1        P2SKIP = P2SKIP_B0__NOT_SKIPPED | P2SKIP_B1__NOT_SKIPPED
 805   1            | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__NOT_SKIPPED | P2SKIP_B4__NOT_SKIPPED
 806   1            | P2SKIP_B5__NOT_SKIPPED | P2SKIP_B6__SKIPPED;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        03/04/2023 16:50:26 PAGE 14  

 807   1        // [P2SKIP - Port 2 Skip]$
 808   1      
 809   1        // $[P2MASK - Port 2 Mask]
 810   1        // [P2MASK - Port 2 Mask]$
 811   1      
 812   1        // $[P2MAT - Port 2 Match]
 813   1        // [P2MAT - Port 2 Match]$
 814   1      
 815   1      }
 816          
 817          extern void
 818          EXTINT_0_enter_DefaultMode_from_RESET (void)
 819          {
 820   1        // $[IT01CF - INT0/INT1 Configuration]
 821   1        /***********************************************************************
 822   1         - INT0 input is active low
 823   1         - Select P0.6
 824   1         - INT1 input is active low
 825   1         - Select P0.0
 826   1         ***********************************************************************/
 827   1        IT01CF = IT01CF_IN0PL__ACTIVE_LOW | IT01CF_IN0SL__P0_6
 828   1            | IT01CF_IN1PL__ACTIVE_LOW | IT01CF_IN1SL__P0_0;
 829   1        // [IT01CF - INT0/INT1 Configuration]$
 830   1      
 831   1      }
 832          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    377    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
