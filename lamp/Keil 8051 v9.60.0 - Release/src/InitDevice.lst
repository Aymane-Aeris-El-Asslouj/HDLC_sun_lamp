C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\elass\S
                    -implicityStudio\v5_workspace\lamp_2\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY
                    -(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\elass\SimplicityStudio\v5_workspace\
                    -lamp_2\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/Simpli
                    -cityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB52/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.
                    -2.5//Device/EFM8BB52/peripheral_driver/inc) REGFILE(lamp_2.ORC) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENG
                    -TH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB52_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        // Save the SFRPAGE
  27   1        uint8_t SFRPAGE_save = SFRPAGE;
  28   1        WDT_0_enter_DefaultMode_from_RESET ();
  29   1        PORTS_0_enter_DefaultMode_from_RESET ();
  30   1        PORTS_1_enter_DefaultMode_from_RESET ();
  31   1        PORTS_2_enter_DefaultMode_from_RESET ();
  32   1        PORTS_3_enter_DefaultMode_from_RESET ();
  33   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  34   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  35   1        CIP51_0_enter_DefaultMode_from_RESET ();
  36   1        TIMER01_0_enter_DefaultMode_from_RESET ();
  37   1        TIMER16_2_enter_DefaultMode_from_RESET ();
  38   1        TIMER16_3_enter_DefaultMode_from_RESET ();
  39   1        TIMER16_4_enter_DefaultMode_from_RESET ();
  40   1        TIMER_SETUP_0_enter_DefaultMode_from_RESET ();
  41   1        PWM_0_enter_DefaultMode_from_RESET ();
  42   1        SMBUS_0_enter_DefaultMode_from_RESET ();
  43   1        UART_0_enter_DefaultMode_from_RESET ();
  44   1        EXTINT_0_enter_DefaultMode_from_RESET ();
  45   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  46   1        // Restore the SFRPAGE
  47   1        SFRPAGE = SFRPAGE_save;
  48   1        // [Config Calls]$
  49   1      
  50   1      }
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 2   

  51          
  52          extern void
  53          WDT_0_enter_DefaultMode_from_RESET (void)
  54          {
  55   1        // $[Watchdog Timer Init Variable Declarations]
  56   1        uint32_t i;
  57   1        bool ea;
  58   1        // [Watchdog Timer Init Variable Declarations]$
  59   1      
  60   1        // $[WDTCN - Watchdog Timer Control]
  61   1        SFRPAGE = 0x00;
  62   1      
  63   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  64   1        WDTCN = 0xA5;
  65   1      
  66   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  67   1        for (i = 0; i < (2 * 3062500UL) / (80000 * 3); i++)
  68   1          {
  69   2            NOP ();
  70   2          }
  71   1      
  72   1        // Disable WDT
  73   1        ea = IE_EA;
  74   1        IE_EA = 0;
  75   1        WDTCN = 0xDE;
  76   1        WDTCN = 0xAD;
  77   1        IE_EA = ea;
  78   1      
  79   1        // [WDTCN - Watchdog Timer Control]$
  80   1      
  81   1      }
  82          
  83          extern void
  84          PORTS_0_enter_DefaultMode_from_RESET (void)
  85          {
  86   1        // $[P0 - Port 0 Pin Latch]
  87   1        // [P0 - Port 0 Pin Latch]$
  88   1      
  89   1        // $[P0MDOUT - Port 0 Output Mode]
  90   1        /***********************************************************************
  91   1         - P0.0 output is open-drain
  92   1         - P0.1 output is open-drain
  93   1         - P0.2 output is push-pull
  94   1         - P0.3 output is push-pull
  95   1         - P0.4 output is push-pull
  96   1         - P0.5 output is open-drain
  97   1         - P0.6 output is open-drain
  98   1         - P0.7 output is open-drain
  99   1         ***********************************************************************/
 100   1        P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 101   1            | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__PUSH_PULL | P0MDOUT_B4__PUSH_PULL
 102   1            | P0MDOUT_B5__OPEN_DRAIN | P0MDOUT_B6__OPEN_DRAIN
 103   1            | P0MDOUT_B7__OPEN_DRAIN;
 104   1        // [P0MDOUT - Port 0 Output Mode]$
 105   1      
 106   1        // $[P0MDIN - Port 0 Input Mode]
 107   1        /***********************************************************************
 108   1         - P0.0 pin is configured for digital mode
 109   1         - P0.1 pin is configured for digital mode
 110   1         - P0.2 pin is configured for digital mode
 111   1         - P0.3 pin is configured for digital mode
 112   1         - P0.4 pin is configured for digital mode
 113   1         - P0.5 pin is configured for digital mode
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 3   

 114   1         - P0.6 pin is configured for digital mode
 115   1         - P0.7 pin is configured for analog mode
 116   1         ***********************************************************************/
 117   1        P0MDIN = P0MDIN_B0__DIGITAL | P0MDIN_B1__DIGITAL | P0MDIN_B2__DIGITAL
 118   1            | P0MDIN_B3__DIGITAL | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 119   1            | P0MDIN_B6__DIGITAL | P0MDIN_B7__ANALOG;
 120   1        // [P0MDIN - Port 0 Input Mode]$
 121   1      
 122   1        // $[P0SKIP - Port 0 Skip]
 123   1        // [P0SKIP - Port 0 Skip]$
 124   1      
 125   1        // $[P0MASK - Port 0 Mask]
 126   1        // [P0MASK - Port 0 Mask]$
 127   1      
 128   1        // $[P0MAT - Port 0 Match]
 129   1        // [P0MAT - Port 0 Match]$
 130   1      
 131   1      }
 132          
 133          extern void
 134          PBCFG_0_enter_DefaultMode_from_RESET (void)
 135          {
 136   1        // $[XBR2 - Port I/O Crossbar 2]
 137   1        /***********************************************************************
 138   1         - Weak Pullups enabled 
 139   1         - Crossbar enabled
 140   1         - PWM single ended output for all enabled channels
 141   1         - UART1 I/O unavailable at Port pin
 142   1         - UART1 RTS1 unavailable at Port pin
 143   1         - UART1 CTS1 unavailable at Port pin
 144   1         - PWM0 Ch0 and Ch1 routed to Port pin
 145   1         ***********************************************************************/
 146   1        SFRPAGE = 0x00;
 147   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 148   1            | XBR2_PWMDE__SINGLE | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 149   1            | XBR2_URT1CTSE__DISABLED | XBR2_PWME__PWM0CH01;
 150   1        // [XBR2 - Port I/O Crossbar 2]$
 151   1      
 152   1        // $[PRTDRV - Port Drive Strength]
 153   1        // [PRTDRV - Port Drive Strength]$
 154   1      
 155   1        // $[XBR0 - Port I/O Crossbar 0]
 156   1        /***********************************************************************
 157   1         - UART0 TX0, RX0 routed to Port pins P0.4 and P0.5
 158   1         - SPI I/O unavailable at Port pins
 159   1         - SMBus 0 I/O routed to Port pins
 160   1         - CP0 unavailable at Port pin
 161   1         - Asynchronous CP0 unavailable at Port pin
 162   1         - CP1 unavailable at Port pin
 163   1         - Asynchronous CP1 unavailable at Port pin
 164   1         - SYSCLK unavailable at Port pin
 165   1         ***********************************************************************/
 166   1        XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 167   1            | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 168   1            | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 169   1        // [XBR0 - Port I/O Crossbar 0]$
 170   1      
 171   1        // $[XBR1 - Port I/O Crossbar 1]
 172   1        // [XBR1 - Port I/O Crossbar 1]$
 173   1      
 174   1      }
 175          
 176          extern void
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 4   

 177          CLOCK_0_enter_DefaultMode_from_RESET (void)
 178          {
 179   1        // $[HFOSC0 49 and 49/1.5 MHz Oscillator Setup]
 180   1        // Ensure SYSCLK is > 24 MHz before switching to 49 MHz or 49/1.5 MHz Oscillator
 181   1        CLKSEL = CLKSEL_CLKSL__HFOSC0_clk24p5 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 182   1        while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 183   1          ;
 184   1        // [HFOSC0 49 and 49/1.5 MHz Oscillator Setup]$
 185   1      
 186   1        // $[CLKSEL - Clock Select]
 187   1        /***********************************************************************
 188   1         - Clock derived from the Internal High Frequency Oscillator 49 MHz
 189   1         - SYSCLK is equal to selected clock source divided by 1
 190   1         ***********************************************************************/
 191   1        CLKSEL = CLKSEL_CLKSL__HFOSC0_clk49 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 192   1        while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 193   1          ;
 194   1        // [CLKSEL - Clock Select]$
 195   1      
 196   1        // $[CLKGRP0 - Clock Group 0]
 197   1        // [CLKGRP0 - Clock Group 0]$
 198   1      
 199   1      }
 200          
 201          extern void
 202          CIP51_0_enter_DefaultMode_from_RESET (void)
 203          {
 204   1        // $[PFE0CN - Prefetch Engine Control]
 205   1        /***********************************************************************
 206   1         - Enables the Prefetch Engine when SYSCLK < 50 MHz
 207   1         ***********************************************************************/
 208   1        SFRPAGE = 0x10;
 209   1        PFE0CN = PFE0CN_FLRT__SYSCLK_BELOW_50_MHZ;
 210   1        // [PFE0CN - Prefetch Engine Control]$
 211   1      
 212   1      }
 213          
 214          extern void
 215          PWM_0_enter_DefaultMode_from_RESET (void)
 216          {
 217   1        // $[Stop PWM]
 218   1        SFRPAGE = 0x10;
 219   1        PWMCFG1 &= ~(PWMCFG1_PWMEN__BMASK);
 220   1        // [Stop PWM]$
 221   1      
 222   1        // $[PWMCKDIV - PWMCKDIV]
 223   1        // [PWMCKDIV - PWMCKDIV]$
 224   1      
 225   1        // $[PWMCFG0 - PWM Configuration 0]
 226   1        /***********************************************************************
 227   1         - Enable clock to the PWM module
 228   1         - PWM will operate in Edge-aligned mode
 229   1         - No channels will be synchronously updated
 230   1         - PWM will continue running on breakpoints in debug mode
 231   1         - Rising edge on the enabled external trigger will start PWM counter
 232   1         - Disable Kill0 signal to halt the PWM
 233   1         - Disable Kill1 signal to halt the PWM
 234   1         ***********************************************************************/
 235   1        PWMCFG0 = PWMCFG0_PWMCLKEN__ENABLE | PWMCFG0_PWMMODE__EDGE
 236   1            | PWMCFG0_SYNCUPD__NOSYNCUPD | PWMCFG0_DBGSTLEN__DISABLE
 237   1            | PWMCFG0_TRGESEL__REDGE | PWMCFG0_KILL0EN__DISABLE
 238   1            | PWMCFG0_KILL1EN__DISABLE;
 239   1        // [PWMCFG0 - PWM Configuration 0]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 5   

 240   1      
 241   1        // $[PWMCFG1 - PWM Configuration 1]
 242   1        // [PWMCFG1 - PWM Configuration 1]$
 243   1      
 244   1        // $[PWMCFG2 - PWM Configuration 2]
 245   1        // [PWMCFG2 - PWM Configuration 2]$
 246   1      
 247   1        // $[PWMCFG3 - PWMCFG3]
 248   1        // [PWMCFG3 - PWMCFG3]$
 249   1      
 250   1        // $[PWML - PWML]
 251   1        // [PWML - PWML]$
 252   1      
 253   1        // $[PWMH - PWMH]
 254   1        // [PWMH - PWMH]$
 255   1      
 256   1        // $[PWMLIML - PWMLIML]
 257   1        /***********************************************************************
 258   1         - PWM Counter Limit LSB = 0xFF
 259   1         ***********************************************************************/
 260   1        PWMLIML = (0xFF << PWMLIML_PWMLIML__SHIFT);
 261   1        // [PWMLIML - PWMLIML]$
 262   1      
 263   1        // $[PWMLIMH - PWMLIMH]
 264   1        /***********************************************************************
 265   1         - PWM Counter Limit MSB = 0xFF
 266   1         ***********************************************************************/
 267   1        PWMLIMH = (0xFF << PWMLIMH_PWMLIMH__SHIFT);
 268   1        // [PWMLIMH - PWMLIMH]$
 269   1      
 270   1        // $[PWMDTIPLIM - PWMDTIPLIM]
 271   1        // [PWMDTIPLIM - PWMDTIPLIM]$
 272   1      
 273   1        // $[PWMDTINLIM - PWMDTINLIM]
 274   1        // [PWMDTINLIM - PWMDTINLIM]$
 275   1      
 276   1        // $[PWMIE - PWMIE]
 277   1        // [PWMIE - PWMIE]$
 278   1      
 279   1        // Set the compare registers of channels 0 and 1 to sensible initial values.
 280   1        // This is done synchronously, although that's not strictly necessary at this
 281   1        // time since we haven't enabled the peripheral yet.
 282   1        // See pwm_set() for further information.
 283   1        PWMCFG0 &= ~PWMCFG0_SYNCUPD__FMASK;
 284   1        PWMCPUDL0 = DEFAULT_PWM_CHANNEL0 & 0xff;
 285   1        PWMCPUDH0 = (DEFAULT_PWM_CHANNEL0 >> 8) & 0xff;
 286   1        PWMCPUDL1 = DEFAULT_PWM_CHANNEL1 & 0xff;
 287   1        PWMCPUDH1 = (DEFAULT_PWM_CHANNEL1 >> 8) & 0xff;
 288   1        PWMCFG0 |= PWMCFG0_SYNCUPD__CH0CH1CH2;
 289   1      
 290   1        // Enable output on channels 0 and 1.
 291   1        PWMCFG2 |= PWMCFG2_CH0EN__BMASK;
 292   1        PWMCFG2 |= PWMCFG2_CH1EN__BMASK;
 293   1      
 294   1        // $[PWM On]
 295   1        PWMCFG1 |= PWMCFG1_PWMEN__ENABLE;
 296   1        // [PWM On]$
 297   1      
 298   1      }
 299          
 300          extern void
 301          PORTS_3_enter_DefaultMode_from_RESET (void)
 302          {
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 6   

 303   1        // $[P3 - Port 3 Pin Latch]
 304   1        // [P3 - Port 3 Pin Latch]$
 305   1      
 306   1        // $[P3MDOUT - Port 3 Output Mode]
 307   1        // [P3MDOUT - Port 3 Output Mode]$
 308   1      
 309   1        // $[P3MDIN - Port 3 Input Mode]
 310   1        /***********************************************************************
 311   1         - P3.0 pin is configured for analog mode
 312   1         - P3.1 pin is configured for analog mode
 313   1         - P3.2 pin is configured for analog mode
 314   1         - P3.3 pin is configured for digital mode
 315   1         - P3.4 pin is configured for analog mode
 316   1         - P3.7 pin is configured for analog mode
 317   1         ***********************************************************************/
 318   1        P3MDIN = P3MDIN_B0__ANALOG | P3MDIN_B1__ANALOG | P3MDIN_B2__ANALOG
 319   1            | P3MDIN_B3__DIGITAL | P3MDIN_B4__ANALOG | P3MDIN_B7__ANALOG;
 320   1        // [P3MDIN - Port 3 Input Mode]$
 321   1      
 322   1      }
 323          
 324          extern void
 325          PORTS_1_enter_DefaultMode_from_RESET (void)
 326          {
 327   1        // $[P1 - Port 1 Pin Latch]
 328   1        // [P1 - Port 1 Pin Latch]$
 329   1      
 330   1        // $[P1MDOUT - Port 1 Output Mode]
 331   1        /***********************************************************************
 332   1         - P1.0 output is open-drain
 333   1         - P1.1 output is open-drain
 334   1         - P1.2 output is open-drain
 335   1         - P1.3 output is open-drain
 336   1         - P1.4 output is push-pull
 337   1         - P1.5 output is open-drain
 338   1         - P1.6 output is open-drain
 339   1         - P1.7 output is open-drain
 340   1         ***********************************************************************/
 341   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 342   1            | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__PUSH_PULL
 343   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN
 344   1            | P1MDOUT_B7__OPEN_DRAIN;
 345   1        // [P1MDOUT - Port 1 Output Mode]$
 346   1      
 347   1        // $[P1MDIN - Port 1 Input Mode]
 348   1        /***********************************************************************
 349   1         - P1.0 pin is configured for analog mode
 350   1         - P1.1 pin is configured for analog mode
 351   1         - P1.2 pin is configured for analog mode
 352   1         - P1.3 pin is configured for analog mode
 353   1         - P1.4 pin is configured for digital mode
 354   1         - P1.5 pin is configured for analog mode
 355   1         - P1.6 pin is configured for analog mode
 356   1         - P1.7 pin is configured for analog mode
 357   1         ***********************************************************************/
 358   1        P1MDIN = P1MDIN_B0__ANALOG | P1MDIN_B1__ANALOG | P1MDIN_B2__ANALOG
 359   1            | P1MDIN_B3__ANALOG | P1MDIN_B4__DIGITAL | P1MDIN_B5__ANALOG
 360   1            | P1MDIN_B6__ANALOG | P1MDIN_B7__ANALOG;
 361   1        // [P1MDIN - Port 1 Input Mode]$
 362   1      
 363   1        // $[P1SKIP - Port 1 Skip]
 364   1        // [P1SKIP - Port 1 Skip]$
 365   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 7   

 366   1        // $[P1MASK - Port 1 Mask]
 367   1        // [P1MASK - Port 1 Mask]$
 368   1      
 369   1        // $[P1MAT - Port 1 Match]
 370   1        // [P1MAT - Port 1 Match]$
 371   1      
 372   1      }
 373          
 374          extern void
 375          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 376          {
 377   1        // $[EIE1 - Extended Interrupt Enable 1]
 378   1        /***********************************************************************
 379   1         - Disable ADC0 Conversion Complete interrupt
 380   1         - Disable ADC0 Window Comparison interrupt
 381   1         - Disable CP0 interrupts
 382   1         - Disable CP1 interrupts
 383   1         - Disable all Port Match interrupts
 384   1         - Disable all PCA0 interrupts
 385   1         - Enable interrupt requests generated by SMB0
 386   1         - Disable Timer 3 interrupts
 387   1         ***********************************************************************/
 388   1        EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 389   1            | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 390   1            | EIE1_ESMB0__ENABLED | EIE1_ET3__DISABLED;
 391   1        // [EIE1 - Extended Interrupt Enable 1]$
 392   1      
 393   1        // $[EIE2 - Extended Interrupt Enable 2]
 394   1        // [EIE2 - Extended Interrupt Enable 2]$
 395   1      
 396   1        // $[EIP1H - Extended Interrupt Priority 1 High]
 397   1        // [EIP1H - Extended Interrupt Priority 1 High]$
 398   1      
 399   1        // $[EIP1 - Extended Interrupt Priority 1 Low]
 400   1        // [EIP1 - Extended Interrupt Priority 1 Low]$
 401   1      
 402   1        // $[EIP2 - Extended Interrupt Priority 2]
 403   1        // [EIP2 - Extended Interrupt Priority 2]$
 404   1      
 405   1        // $[EIP2H - Extended Interrupt Priority 2 High]
 406   1        // [EIP2H - Extended Interrupt Priority 2 High]$
 407   1      
 408   1        // $[IE - Interrupt Enable]
 409   1        /***********************************************************************
 410   1         - Enable each interrupt according to its individual mask setting
 411   1         - Disable external interrupt 0
 412   1         - Disable external interrupt 1
 413   1         - Disable all SPI0 interrupts
 414   1         - Disable all Timer 0 interrupt
 415   1         - Disable all Timer 1 interrupt
 416   1         - Disable Timer 2 interrupt
 417   1         - Enable UART0 interrupt
 418   1         ***********************************************************************/
 419   1        IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 420   1            | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__DISABLED
 421   1            | IE_ES0__ENABLED;
 422   1        // [IE - Interrupt Enable]$
 423   1      
 424   1        // $[IP - Interrupt Priority]
 425   1        // [IP - Interrupt Priority]$
 426   1      
 427   1        // $[IPH - Interrupt Priority High]
 428   1        // [IPH - Interrupt Priority High]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 8   

 429   1      
 430   1      }
 431          
 432          extern void
 433          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
 434          {
 435   1        // $[CKCON0 - Clock Control 0]
 436   1        /***********************************************************************
 437   1         - System clock divided by 4
 438   1         - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 439   1         - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 440   1         - Timer 2 low byte uses the system clock
 441   1         - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 442   1         - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 443   1         - Timer 1 uses the system clock
 444   1         ***********************************************************************/
 445   1        SFRPAGE = 0x00;
 446   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE
 447   1            | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__SYSCLK
 448   1            | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 449   1            | CKCON0_T1M__SYSCLK;
 450   1        // [CKCON0 - Clock Control 0]$
 451   1      
 452   1        // $[CKCON1 - Clock Control 1]
 453   1        // [CKCON1 - Clock Control 1]$
 454   1      
 455   1        // $[TMOD - Timer 0/1 Mode]
 456   1        /***********************************************************************
 457   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 458   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 459   1         - Timer Mode
 460   1         - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 461   1         - Timer Mode
 462   1         - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 463   1         ***********************************************************************/
 464   1        TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 465   1            | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 466   1        // [TMOD - Timer 0/1 Mode]$
 467   1      
 468   1        // $[TCON - Timer 0/1 Control]
 469   1        /***********************************************************************
 470   1         - INT0 is edge triggered
 471   1         - Start Timer 0 running
 472   1         - Start Timer 1 running
 473   1         ***********************************************************************/
 474   1        TCON |= TCON_IT0__EDGE | TCON_TR0__RUN | TCON_TR1__RUN;
 475   1        // [TCON - Timer 0/1 Control]$
 476   1      
 477   1      }
 478          
 479          extern void
 480          TIMER16_2_enter_DefaultMode_from_RESET (void)
 481          {
 482   1        // $[Timer Initialization]
 483   1        // Save Timer Configuration
 484   1        uint8_t TMR2CN0_TR2_save;
 485   1        TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 486   1        // Stop Timer
 487   1        TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 488   1        // [Timer Initialization]$
 489   1      
 490   1        // $[TMR2CN1 - Timer 2 Control 1]
 491   1        // [TMR2CN1 - Timer 2 Control 1]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 9   

 492   1      
 493   1        // $[TMR2CN0 - Timer 2 Control]
 494   1        // [TMR2CN0 - Timer 2 Control]$
 495   1      
 496   1        // $[TMR2H - Timer 2 High Byte]
 497   1        // [TMR2H - Timer 2 High Byte]$
 498   1      
 499   1        // $[TMR2L - Timer 2 Low Byte]
 500   1        // [TMR2L - Timer 2 Low Byte]$
 501   1      
 502   1        // $[TMR2RLH - Timer 2 Reload High Byte]
 503   1        /***********************************************************************
 504   1         - Timer 2 Reload High Byte = 0xFE
 505   1         ***********************************************************************/
 506   1        TMR2RLH = (0xFE << TMR2RLH_TMR2RLH__SHIFT);
 507   1        // [TMR2RLH - Timer 2 Reload High Byte]$
 508   1      
 509   1        // $[TMR2RLL - Timer 2 Reload Low Byte]
 510   1        /***********************************************************************
 511   1         - Timer 2 Reload Low Byte = 0x16
 512   1         ***********************************************************************/
 513   1        TMR2RLL = (0x16 << TMR2RLL_TMR2RLL__SHIFT);
 514   1        // [TMR2RLL - Timer 2 Reload Low Byte]$
 515   1      
 516   1        // $[TMR2CN0]
 517   1        /***********************************************************************
 518   1         - Start Timer 2 running
 519   1         ***********************************************************************/
 520   1        TMR2CN0 |= TMR2CN0_TR2__RUN;
 521   1        // [TMR2CN0]$
 522   1      
 523   1        // $[Timer Restoration]
 524   1        // Restore Timer Configuration
 525   1        TMR2CN0 |= TMR2CN0_TR2_save;
 526   1        // [Timer Restoration]$
 527   1      
 528   1      }
 529          
 530          extern void
 531          TIMER16_3_enter_DefaultMode_from_RESET (void)
 532          {
 533   1        // $[Timer Initialization]
 534   1        // Save Timer Configuration
 535   1        uint8_t TMR3CN0_TR3_save;
 536   1        TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 537   1        // Stop Timer
 538   1        TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 539   1        // [Timer Initialization]$
 540   1      
 541   1        // $[TMR3CN1 - Timer 3 Control 1]
 542   1        // [TMR3CN1 - Timer 3 Control 1]$
 543   1      
 544   1        // $[TMR3CN0 - Timer 3 Control]
 545   1        // [TMR3CN0 - Timer 3 Control]$
 546   1      
 547   1        // $[TMR3H - Timer 3 High Byte]
 548   1        // [TMR3H - Timer 3 High Byte]$
 549   1      
 550   1        // $[TMR3L - Timer 3 Low Byte]
 551   1        // [TMR3L - Timer 3 Low Byte]$
 552   1      
 553   1        // $[TMR3RLH - Timer 3 Reload High Byte]
 554   1        /***********************************************************************
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 10  

 555   1         - Timer 3 Reload High Byte = 0xF0
 556   1         ***********************************************************************/
 557   1        TMR3RLH = (0xF0 << TMR3RLH_TMR3RLH__SHIFT);
 558   1        // [TMR3RLH - Timer 3 Reload High Byte]$
 559   1      
 560   1        // $[TMR3RLL - Timer 3 Reload Low Byte]
 561   1        /***********************************************************************
 562   1         - Timer 3 Reload Low Byte = 0x0D
 563   1         ***********************************************************************/
 564   1        TMR3RLL = (0x0D << TMR3RLL_TMR3RLL__SHIFT);
 565   1        // [TMR3RLL - Timer 3 Reload Low Byte]$
 566   1      
 567   1        // $[TMR3CN0]
 568   1        /***********************************************************************
 569   1         - Start Timer 3 running
 570   1         ***********************************************************************/
 571   1        TMR3CN0 |= TMR3CN0_TR3__RUN;
 572   1        // [TMR3CN0]$
 573   1      
 574   1        // $[Timer Restoration]
 575   1        // Restore Timer Configuration
 576   1        TMR3CN0 |= TMR3CN0_TR3_save;
 577   1        // [Timer Restoration]$
 578   1      
 579   1      }
 580          
 581          extern void
 582          TIMER16_4_enter_DefaultMode_from_RESET (void)
 583          {
 584   1        // $[Timer Initialization]
 585   1        // Save Timer Configuration
 586   1        uint8_t TMR4CN0_TR4_save;
 587   1        SFRPAGE = 0x10;
 588   1        TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 589   1        // Stop Timer
 590   1        TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 591   1        // [Timer Initialization]$
 592   1      
 593   1        // $[TMR4CN1 - Timer 4 Control 1]
 594   1        // [TMR4CN1 - Timer 4 Control 1]$
 595   1      
 596   1        // $[TMR4CN0 - Timer 4 Control]
 597   1        /***********************************************************************
 598   1         - Timer 4 is clocked by Timer 3 overflows
 599   1         ***********************************************************************/
 600   1        TMR4CN0 &= ~TMR4CN0_T4XCLK__FMASK;
 601   1        TMR4CN0 |= TMR4CN0_T4XCLK__TIMER3;
 602   1        // [TMR4CN0 - Timer 4 Control]$
 603   1      
 604   1        // $[TMR4H - Timer 4 High Byte]
 605   1        // [TMR4H - Timer 4 High Byte]$
 606   1      
 607   1        // $[TMR4L - Timer 4 Low Byte]
 608   1        // [TMR4L - Timer 4 Low Byte]$
 609   1      
 610   1        // $[TMR4RLH - Timer 4 Reload High Byte]
 611   1        // [TMR4RLH - Timer 4 Reload High Byte]$
 612   1      
 613   1        // $[TMR4RLL - Timer 4 Reload Low Byte]
 614   1        // [TMR4RLL - Timer 4 Reload Low Byte]$
 615   1      
 616   1        // $[TMR4CN0]
 617   1        /***********************************************************************
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 11  

 618   1         - Start Timer 4 running
 619   1         ***********************************************************************/
 620   1        TMR4CN0 |= TMR4CN0_TR4__RUN;
 621   1        // [TMR4CN0]$
 622   1      
 623   1        // $[Timer Restoration]
 624   1        // Restore Timer Configuration
 625   1        TMR4CN0 |= TMR4CN0_TR4_save;
 626   1        // [Timer Restoration]$
 627   1      
 628   1      }
 629          
 630          extern void
 631          UART_0_enter_DefaultMode_from_RESET (void)
 632          {
 633   1        // $[SCON0 - UART0 Serial Port Control]
 634   1        /***********************************************************************
 635   1         - UART0 reception enabled
 636   1         - RI is set and an interrupt is generated only when the stop bit is
 637   1         logic 1
 638   1         ***********************************************************************/
 639   1        SCON0 |= SCON0_REN__RECEIVE_ENABLED | SCON0_MCE__MULTI_ENABLED;
 640   1        // [SCON0 - UART0 Serial Port Control]$
 641   1      
 642   1      }
 643          
 644          extern void
 645          TIMER01_0_enter_DefaultMode_from_RESET (void)
 646          {
 647   1      
 648   1        // $[Timer Initialization]
 649   1        //Save Timer Configuration
 650   1        uint8_t TCON_save;
 651   1        SFRPAGE = 0x00;
 652   1        TCON_save = TCON;
 653   1        //Stop Timers
 654   1        TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 655   1      
 656   1        // [Timer Initialization]$
 657   1      
 658   1        // $[TH0 - Timer 0 High Byte]
 659   1        /***********************************************************************
 660   1         - Timer 0 High Byte = 0x86
 661   1         ***********************************************************************/
 662   1        TH0 = (0x86 << TH0_TH0__SHIFT);
 663   1        // [TH0 - Timer 0 High Byte]$
 664   1      
 665   1        // $[TL0 - Timer 0 Low Byte]
 666   1        // [TL0 - Timer 0 Low Byte]$
 667   1      
 668   1        // $[TH1 - Timer 1 High Byte]
 669   1        /***********************************************************************
 670   1         - Timer 1 High Byte = 0x2B
 671   1         ***********************************************************************/
 672   1        TH1 = (0x2B << TH1_TH1__SHIFT);
 673   1        // [TH1 - Timer 1 High Byte]$
 674   1      
 675   1        // $[TL1 - Timer 1 Low Byte]
 676   1        // [TL1 - Timer 1 Low Byte]$
 677   1      
 678   1        // $[Timer Restoration]
 679   1        //Restore Timer Configuration
 680   1        TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 12  

 681   1      
 682   1        // [Timer Restoration]$
 683   1      
 684   1      }
 685          
 686          extern void
 687          SMBUS_0_enter_DefaultMode_from_RESET (void)
 688          {
 689   1        // $[SMB0FCN0 - SMBus0 FIFO Control 0]
 690   1        /***********************************************************************
 691   1         - SMBus 0 interrupts will be generated if RFRQ is set
 692   1         - SMBus 0 interrupts will not be generated when TFRQ is set
 693   1         - RFRQ will be set anytime new data arrives in the RX FIFO 
 694   1         - TFRQ will be set when the TX FIFO is empty
 695   1         ***********************************************************************/
 696   1        SFRPAGE = 0x20;
 697   1        SMB0FCN0 = SMB0FCN0_RFRQE__ENABLED | SMB0FCN0_TFRQE__DISABLED
 698   1            | SMB0FCN0_RXTH__ZERO | SMB0FCN0_TXTH__ZERO;
 699   1        // [SMB0FCN0 - SMBus0 FIFO Control 0]$
 700   1      
 701   1        // $[SMB0RXLN - SMBus0 Receive Length Counter]
 702   1        // [SMB0RXLN - SMBus0 Receive Length Counter]$
 703   1      
 704   1        // $[SMB0ADR - SMBus 0 Slave Address]
 705   1        // [SMB0ADR - SMBus 0 Slave Address]$
 706   1      
 707   1        // $[SMB0ADM - SMBus 0 Slave Address Mask]
 708   1        // [SMB0ADM - SMBus 0 Slave Address Mask]$
 709   1      
 710   1        // $[SMB0TC - SMBus 0 Timing and Pin Control]
 711   1        /***********************************************************************
 712   1         - SDA setup time is 11 SYSCLKs and SDA hold time is 12 SYSCLKs
 713   1         - SCL is mapped to the lower-numbered port pin, and SDA is mapped to the
 714   1         higher-numbered port pin
 715   1         - No additional SDA falling edge recognition delay 
 716   1         ***********************************************************************/
 717   1        SFRPAGE = 0x00;
 718   1        SMB0TC = SMB0TC_DLYEXT__STANDARD | SMB0TC_SWAP__SDA_HIGH_PIN
 719   1            | SMB0TC_SDD__NONE;
 720   1        // [SMB0TC - SMBus 0 Timing and Pin Control]$
 721   1      
 722   1        // $[SMB0CF - SMBus 0 Configuration]
 723   1        /***********************************************************************
 724   1         - Timer 2 Low Byte Overflow
 725   1         - Slave states are inhibited
 726   1         - Enable the SMBus module
 727   1         ***********************************************************************/
 728   1        SMB0CF |= SMB0CF_SMBCS__TIMER2_LOW | SMB0CF_INH__SLAVE_DISABLED
 729   1            | SMB0CF_ENSMB__ENABLED;
 730   1        // [SMB0CF - SMBus 0 Configuration]$
 731   1      
 732   1      }
 733          
 734          extern void
 735          PORTS_2_enter_DefaultMode_from_RESET (void)
 736          {
 737   1        // $[P2 - Port 2 Pin Latch]
 738   1        // [P2 - Port 2 Pin Latch]$
 739   1      
 740   1        // $[P2MDOUT - Port 2 Output Mode]
 741   1        // [P2MDOUT - Port 2 Output Mode]$
 742   1      
 743   1        // $[P2MDIN - Port 2 Input Mode]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 13  

 744   1        /***********************************************************************
 745   1         - P2.0 pin is configured for analog mode
 746   1         - P2.1 pin is configured for analog mode
 747   1         - P2.2 pin is configured for analog mode
 748   1         - P2.3 pin is configured for analog mode
 749   1         - P2.4 pin is configured for analog mode
 750   1         - P2.5 pin is configured for analog mode
 751   1         - P2.6 pin is configured for digital mode
 752   1         ***********************************************************************/
 753   1        SFRPAGE = 0x20;
 754   1        P2MDIN = P2MDIN_B0__ANALOG | P2MDIN_B1__ANALOG | P2MDIN_B2__ANALOG
 755   1            | P2MDIN_B3__ANALOG | P2MDIN_B4__ANALOG | P2MDIN_B5__ANALOG
 756   1            | P2MDIN_B6__DIGITAL;
 757   1        // [P2MDIN - Port 2 Input Mode]$
 758   1      
 759   1        // $[P2SKIP - Port 2 Skip]
 760   1        /***********************************************************************
 761   1         - P2.0 pin is not skipped by the crossbar
 762   1         - P2.1 pin is not skipped by the crossbar
 763   1         - P2.2 pin is not skipped by the crossbar
 764   1         - P2.3 pin is not skipped by the crossbar
 765   1         - P2.4 pin is not skipped by the crossbar
 766   1         - P2.5 pin is not skipped by the crossbar
 767   1         - P2.6 pin is skipped by the crossbar
 768   1         ***********************************************************************/
 769   1        P2SKIP = P2SKIP_B0__NOT_SKIPPED | P2SKIP_B1__NOT_SKIPPED
 770   1            | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__NOT_SKIPPED | P2SKIP_B4__NOT_SKIPPED
 771   1            | P2SKIP_B5__NOT_SKIPPED | P2SKIP_B6__SKIPPED;
 772   1        // [P2SKIP - Port 2 Skip]$
 773   1      
 774   1        // $[P2MASK - Port 2 Mask]
 775   1        // [P2MASK - Port 2 Mask]$
 776   1      
 777   1        // $[P2MAT - Port 2 Match]
 778   1        // [P2MAT - Port 2 Match]$
 779   1      
 780   1      }
 781          
 782          extern void
 783          EXTINT_0_enter_DefaultMode_from_RESET (void)
 784          {
 785   1        // $[IT01CF - INT0/INT1 Configuration]
 786   1        /***********************************************************************
 787   1         - INT0 input is active low
 788   1         - Select P0.6
 789   1         - INT1 input is active low
 790   1         - Select P0.0
 791   1         ***********************************************************************/
 792   1        IT01CF = IT01CF_IN0PL__ACTIVE_LOW | IT01CF_IN0SL__P0_6
 793   1            | IT01CF_IN1PL__ACTIVE_LOW | IT01CF_IN1SL__P0_0;
 794   1        // [IT01CF - INT0/INT1 Configuration]$
 795   1      
 796   1      }
 797          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    371    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   INITDEVICE                                                        02/27/2023 00:24:43 PAGE 14  

   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
