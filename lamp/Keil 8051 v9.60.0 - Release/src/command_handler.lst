C51 COMPILER V9.60.0.0   COMMAND_HANDLER                                                   03/04/2023 16:53:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE COMMAND_HANDLER
OBJECT MODULE PLACED IN .\src\command_handler.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\elass\S
                    -implicityStudio\v5_workspace\lamp_2\src\command_handler.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOAT
                    -FUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\elass\SimplicityStudio\v5_works
                    -pace\lamp_2\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/S
                    -implicityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB52/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/805
                    -1/v4.2.5//Device/EFM8BB52/peripheral_driver/inc) REGFILE(lamp_2.ORC) PRINT(.\src\command_handler.lst) COND PAGEWIDTH(120
                    -) PAGELENGTH(65) OBJECT(.\src\command_handler.OBJ)

line level    source

   1          /*
   2           * command_handler.c
   3           *
   4           *  Created on: Feb 18, 2023
   5           *      Author: elass
   6           */
   7          #include <SI_EFM8BB52_Register_Enums.h>
   8          #include "command_handler.h"
   9          #include "pwm.h"
  10          #include "hdlc_l.h"
  11          #include "state_machine.h"
  12          #include "rtc_driver.h"
  13          
  14          #define NUMBER_OF_COMMANDS 6
  15          
  16          
  17          // List of commands
  18          typedef enum {
  19              CM_NONE,
  20              CM_LIGHTNESS,
  21              CM_DISCONNECT,
  22              CM_GET_DATETIME,
  23              CM_SET_DATETIME,
  24              CM_GET_SUNRISETIME
  25          } command_t;
  26          
  27          // Command table item with name, number of arguments, and handler
  28          typedef struct {
  29            command_t command;
  30            uint8_t command_arg_count;
  31            uint8_t (*command_handler)(uint8_t* info_bytes);
  32            uint8_t end_of_communication;
  33          } command_table_element;
  34          
  35          
  36          uint8_t empty_command(uint8_t* command_args_send_info_bytes)
  37          {
  38   1        command_args_send_info_bytes[0] = SUCCESSFUL;
  39   1        return 1;
  40   1      }
  41          
  42          command_table_element xdata command_table[NUMBER_OF_COMMANDS] = {
  43              // Command name,  number of arguments, command_handler
  44              {CM_NONE,         0,                   &empty_command,        true},
  45              {CM_LIGHTNESS,   1,                   &set_lightness_command, false},
  46              {CM_DISCONNECT,         0,                   &empty_command, true},
  47              {CM_GET_DATETIME,         0,                   &get_datetime_command, true},
  48              {CM_SET_DATETIME,         6,                   &set_datetime_command, true},
  49              {CM_GET_SUNRISETIME,         0,                   &get_sunrise_time_command, true}
  50          };
C51 COMPILER V9.60.0.0   COMMAND_HANDLER                                                   03/04/2023 16:53:23 PAGE 2   

  51          
  52          
  53          void uart_command_handler(){
  54   1        command_handler();
  55   1      }
  56          
  57          
  58          void antenna_command_handler(){
  59   1        command_handler();
  60   1      }
  61          
  62          // Command from computer
  63          uint8_t xdata info_bytes[10];
  64          void command_handler(){
  65   1      
  66   1        // received_info_bytes's size
  67   1        uint8_t info_bytes_size;
  68   1      
  69   1        // Command opcode
  70   1        uint8_t command;
  71   1      
  72   1        // Whether communication is going to end after this command
  73   1        bool end_of_communication = true;
  74   1      
  75   1        // Make a copy of in_packet's info field into received_info_bytes
  76   1        hdlc_l_load_received_info_bytes(info_bytes, &info_bytes_size);
  77   1      
  78   1        // Error: No command
  79   1        if (info_bytes_size == 0){
  80   2            info_bytes[0] = NO_COMMAND;
  81   2            info_bytes_size = 1;
  82   2        }
  83   1        else{
  84   2            command = info_bytes[0];
  85   2      
  86   2            // Error: Unknown command
  87   2            if (command >= NUMBER_OF_COMMANDS){
  88   3                info_bytes[0] = UNKNOWN_COMMAND;
  89   3                info_bytes_size = 1;
  90   3            }
  91   2      
  92   2            // Error: Incorrect number of arguments for command
  93   2            else if (command_table[command].command_arg_count != info_bytes_size - 1){
  94   3                info_bytes[0] = INCORRECT_NUMBER_OF_ARGUMENTS;
  95   3                info_bytes_size = 1;
  96   3            }
  97   2      
  98   2             // Get command handler of the command and pass to it the arguments
  99   2            // which are the next bytes in the packet
 100   2            else{
 101   3                end_of_communication = command_table[command].end_of_communication;
 102   3                info_bytes_size = command_table[command].command_handler(&info_bytes[0]);
 103   3            }
 104   2        }
 105   1      
 106   1        if(end_of_communication)
 107   1          event_queue_add_event(EV_UART_DONE);
 108   1      
 109   1      
 110   1        // Send packet
 111   1        hdlc_l_send_info_packet(info_bytes, info_bytes_size);
 112   1      
 113   1        // Re-enable UART0 so transmission starts
C51 COMPILER V9.60.0.0   COMMAND_HANDLER                                                   03/04/2023 16:53:23 PAGE 3   

 114   1        IE |= IE_ES0__BMASK; // IE is on all SFR pages, so no need to change the SFR page
 115   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    173    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     46    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
