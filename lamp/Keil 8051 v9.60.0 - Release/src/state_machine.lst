C51 COMPILER V9.60.0.0   STATE_MACHINE                                                     03/04/2023 16:53:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE STATE_MACHINE
OBJECT MODULE PLACED IN .\src\state_machine.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\elass\S
                    -implicityStudio\v5_workspace\lamp_2\src\state_machine.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFU
                    -ZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\elass\SimplicityStudio\v5_workspa
                    -ce\lamp_2\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/Sim
                    -plicityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB52/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/
                    -v4.2.5//Device/EFM8BB52/peripheral_driver/inc) REGFILE(lamp_2.ORC) PRINT(.\src\state_machine.lst) COND PAGEWIDTH(120) PA
                    -GELENGTH(65) OBJECT(.\src\state_machine.OBJ)

line level    source

   1          #include "state_machine.h"
   2          #include "pwm.h"
   3          #include "rtc_driver.h"
   4          #include "command_handler.h"
   5          
   6          #include <SI_EFM8BB52_Register_Enums.h>                  // SFR declarations
   7          
   8          // List of state of the state machine
   9          typedef enum{
  10            ST_INIT, ST_START, ST_IDLE, ST_UART, ST_ANTENNA,
  11          } state_t;
  12          
  13          // Meely state machine transition table element. Events trigger state transition
  14          // accompanied by an event handler function.
  15          typedef struct {
  16              state_t current_state;
  17              event_t event;
  18              state_t next_state;
  19              void (*event_handler)(void);
  20          } stateTransMatrixRow_t;
  21          
  22          // Meely state machine transition table. A single transition happens per cycle, so
  23          // event transitions are ordered by priority up to down. EV_ANY is the wildcard
  24          // event which always triggers, so it should be at the lowest priority.
  25          void empty(){}
  26          stateTransMatrixRow_t xdata stateTransMatrix[] = {
  27              { ST_INIT,     EV_ANY,               ST_START,     &empty},
  28              { ST_START,    EV_STARTED,           ST_IDLE,      &empty},
  29              { ST_START,    EV_ANY,               ST_START,     &lightness_start_pattern},
  30              { ST_IDLE,     EV_UART_COMMAND,           ST_UART,      &uart_command_handler},
  31              { ST_UART,     EV_UART_COMMAND,           ST_UART,      &uart_command_handler},
  32              { ST_UART,     EV_UART_DONE,           ST_IDLE,      &empty},
  33              { ST_IDLE,     EV_ANTENNA_COMMAND,        ST_ANTENNA,      &antenna_command_handler},
  34              { ST_ANTENNA,     EV_ANTENNA_COMMAND,        ST_ANTENNA,      &antenna_command_handler},
  35              { ST_ANTENNA,     EV_ANTENNA_DONE,           ST_IDLE,      &empty},
  36              { ST_IDLE,     EV_CLOCK_TICK,           ST_IDLE,      &clock_tick},
  37          };
  38          
  39          // Single iteration of the state machine system with up to one transition.
  40          state_t xdata current_state = ST_INIT;
  41          void state_machine_run_iteration(event_t event) {
  42   1        int i;
  43   1        // Iterate through the state transition table
  44   1        for(i = 0; i < sizeof(stateTransMatrix)/sizeof(stateTransMatrix[0]); i++) {
  45   2         // Look for a transition with the current state and event
  46   2          if(stateTransMatrix[i].current_state == current_state) {
  47   3                  if((stateTransMatrix[i].event == event) || (stateTransMatrix[i].event == EV_ANY)) {
  48   4      
  49   4                      // Transition to the next state
  50   4                      current_state =  stateTransMatrix[i].next_state;
C51 COMPILER V9.60.0.0   STATE_MACHINE                                                     03/04/2023 16:53:23 PAGE 2   

  51   4      
  52   4                      // Call the function associated with transition
  53   4                      stateTransMatrix[i].event_handler();
  54   4      
  55   4                      // break so no more transitions happen till the next cycle
  56   4                      break;
  57   4                  }
  58   3              }
  59   2          }
  60   1      }
  61          
  62          
  63          uint8_t xdata event_queue_size = 0;
  64          event_t xdata event_queue[EVENT_QUEUE_SIZE];
  65          
  66          bool event_queue_is_not_full(){
  67   1        return event_queue_size != EVENT_QUEUE_SIZE;
  68   1      }
  69          
  70          void event_queue_add_event(event_t event){
  71   1        if(event_queue_is_not_full()){
  72   2            event_queue[event_queue_size] = event;
  73   2            event_queue_size++;
  74   2        }
  75   1      }
  76          
  77          
  78          // Pop event from queue
  79          event_t fetch_event(){
  80   1        int i;
  81   1        event_t fetched_event;
  82   1          if (event_queue_size > 0)
  83   1            {
  84   2              fetched_event = event_queue[0];
  85   2      
  86   2              for (i = 0; i < event_queue_size-1; i++)
  87   2                event_queue[i] = event_queue[i+1];
  88   2      
  89   2              event_queue_size--;
  90   2      
  91   2              return fetched_event;
  92   2            }
  93   1          else
  94   1            return EV_NONE;
  95   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    229    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     72    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
