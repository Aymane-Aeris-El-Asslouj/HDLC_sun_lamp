C51 COMPILER V9.60.0.0   STATE_MACHINE                                                     02/27/2023 00:24:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE STATE_MACHINE
OBJECT MODULE PLACED IN .\src\state_machine.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\elass\S
                    -implicityStudio\v5_workspace\lamp_2\src\state_machine.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFU
                    -ZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\elass\SimplicityStudio\v5_workspa
                    -ce\lamp_2\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/Sim
                    -plicityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB52/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/
                    -v4.2.5//Device/EFM8BB52/peripheral_driver/inc) REGFILE(lamp_2.ORC) PRINT(.\src\state_machine.lst) COND PAGEWIDTH(120) PA
                    -GELENGTH(65) OBJECT(.\src\state_machine.OBJ)

line level    source

   1          #include "state_machine.h"
   2          #include "pwm.h"
   3          #include "command_handler.h"
   4          
   5          #include <SI_EFM8BB52_Register_Enums.h>                  // SFR declarations
   6          
   7          // List of state of the state machine
   8          typedef enum{
   9            ST_INIT, ST_START, ST_IDLE, ST_DEBOUNCE, ST_BUTTON,
  10          } state_t;
  11          
  12          // Meely state machine transition table element. Events trigger state transition
  13          // accompanied by an event handler function.
  14          typedef struct {
  15              state_t current_state;
  16              event_t event;
  17              state_t next_state;
  18              void (*event_handler)(void);
  19          } stateTransMatrixRow_t;
  20          
  21          // Meely state machine transition table. A single transition happens per cycle, so
  22          // event transitions are ordered by priority up to down. EV_ANY is the wildcard
  23          // event which always triggers, so it should be at the lowest priority.
  24          void empty(){}
  25          stateTransMatrixRow_t stateTransMatrix[] = {
  26              { ST_INIT,     EV_ANY,               ST_START,     &empty},
  27              { ST_START,    EV_STARTED,           ST_IDLE,      &empty},
  28              { ST_START,    EV_ANY,               ST_START,     &increase_lightness},
  29              { ST_IDLE,     EV_COMMAND,           ST_IDLE,      &command_handler},
  30              { ST_IDLE,     EV_BUTTON_PUSHED,     ST_DEBOUNCE,  &empty},
  31              { ST_DEBOUNCE, EV_ANY,               ST_IDLE,      &button}
  32          };
  33          
  34          // Single iteration of the state machine system with up to one transition.
  35          state_t current_state;
  36          void state_machine_run_iteration(event_t event) {
  37   1        int i;
  38   1        // Iterate through the state transition table
  39   1        for(i = 0; i < sizeof(stateTransMatrix)/sizeof(stateTransMatrix[0]); i++) {
  40   2         // Look for a transition with the current state and event
  41   2          if(stateTransMatrix[i].current_state == current_state) {
  42   3                  if((stateTransMatrix[i].event == event) || (stateTransMatrix[i].event == EV_ANY)) {
  43   4      
  44   4                      // Transition to the next state
  45   4                      current_state =  stateTransMatrix[i].next_state;
  46   4      
  47   4                      // Call the function associated with transition
  48   4                      stateTransMatrix[i].event_handler();
  49   4      
  50   4                      // break so no more transitions happen till the next cycle
C51 COMPILER V9.60.0.0   STATE_MACHINE                                                     02/27/2023 00:24:44 PAGE 2   

  51   4                      break;
  52   4                  }
  53   3              }
  54   2          }
  55   1      }
  56          
  57          // Fetch current event and remove it (consumes current event)
  58          event_t current_event = EV_NONE;
  59          event_t fetch_event(){
  60   1          event_t event = current_event;
  61   1          current_event = EV_NONE;
  62   1          return event;
  63   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     96    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     38       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
