C51 COMPILER V9.60.0.0   LAMP_MAIN                                                         02/12/2023 21:37:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LAMP_MAIN
OBJECT MODULE PLACED IN .\src\lamp_main.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\elass\S
                    -implicityStudio\v5_workspace\lamp_2\src\lamp_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(
                    -3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\elass\SimplicityStudio\v5_workspace\la
                    -mp_2\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/Simplici
                    -tyStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB52/inc) PRINT(.\src\lamp_main.lst) COND PAGEWIDTH(120) PAGELENGTH(6
                    -5) OBJECT(.\src\lamp_main.OBJ)

line level    source

   1          //=========================================================
   2          // src/lamp_main.c: generated by Hardware Configurator
   3          //
   4          // This file will be updated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          //-----------------------------------------------------------------------------
  10          // Includes
  11          //-----------------------------------------------------------------------------
  12          #include <SI_EFM8BB52_Register_Enums.h>                  // SFR declarations
  13          #include "InitDevice.h"
  14          // $[Generated Includes]
  15          // [Generated Includes]$
  16          
  17          // Mask of all five buttons within PORT3.
  18          #define P3_BTN_BMASK (P3_B4__BMASK | P3_B3__BMASK | P3_B2__BMASK \
  19                                | P3_B1__BMASK | P3_B0__BMASK)
  20          
  21          //-----------------------------------------------------------------------------
  22          // SiLabs_Startup() Routine
  23          // ----------------------------------------------------------------------------
  24          // This function is called immediately after reset, before the initialization
  25          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  26          // useful place to disable the watchdog timer, which is enable by default
  27          // and may trigger before main() in some instances.
  28          //-----------------------------------------------------------------------------
  29          void
  30          SiLabs_Startup(void)
  31          {
  32   1        // $[SiLabs Startup]
  33   1        // [SiLabs Startup]$
  34   1      }
  35          
  36          // ----------------------------------------------------------------------------
  37          // pwm_set Routine
  38          // ----------------------------------------------------------------------------
  39          // Sets the two PWM channels' compare registers to the given 16-bit values.
  40          // NOTE This doesn't enable the outputs or configure the peripheral in any other
  41          // way.  See PWM_0_enter_DefaultMode_from_RESET() for details on that.
  42          // ----------------------------------------------------------------------------
  43          void
  44          pwm_set(uint16_t channel0, uint16_t channel1)
  45          {
  46   1        // Save the SFR page and switch to SFR page 0x10.  This is needed because the
  47   1        // PWM peripheral's SFRs only exist on page 0x10.  For further information,
  48   1        // see the EFM8BB52 Reference Manual, Section 3. Special Function Registers.
  49   1        uint8_t sfrpage_prev = SFRPAGE;
  50   1        SFRPAGE = 0x10;
  51   1      
C51 COMPILER V9.60.0.0   LAMP_MAIN                                                         02/12/2023 21:37:02 PAGE 2   

  52   1        // In order to prevent glitches, we use the synchronous update mechanism
  53   1        // provided by the buffer registers (PWMCPUDxn) instead of directly writing to
  54   1        // the compare registers (PWMCPxn).
  55   1        // The SYNCUPD flag is cleared before the writes, preventing the peripheral
  56   1        // from reading the buffer registers.  Once the compare values have been
  57   1        // written, the SYNCUPD flag is set and the peripheral begins overwriting its
  58   1        // compare registers with the contents of these update registers each time it
  59   1        // overflows back to 0.
  60   1        PWMCFG0 &= ~PWMCFG0_SYNCUPD__FMASK;
  61   1        PWMCPUDL0 = channel0 & 0xff;
  62   1        PWMCPUDH0 = (channel0 >> 8) & 0xff;
  63   1        PWMCPUDL1 = channel1 & 0xff;
  64   1        PWMCPUDH1 = (channel1 >> 8) & 0xff;
  65   1        PWMCFG0 |= PWMCFG0_SYNCUPD__CH0CH1CH2;
  66   1      
  67   1        // Restore the prior SFR page.
  68   1        SFRPAGE = sfrpage_prev;
  69   1      }
  70          
  71          //-----------------------------------------------------------------------------
  72          // main() Routine
  73          // ----------------------------------------------------------------------------
  74          int
  75          main(void)
  76          {
  77   1        // NOTE Keil doesn't support C99-style variable declaration at arbitrary
  78   1        // points in the code; variables must be declared at the top of a block.
  79   1      //  uint16_t i;
  80   1      
  81   1        // Call hardware initialization routine
  82   1        enter_DefaultMode_from_RESET ();
  83   1      
  84   1        // Set all the button pins high.
  85   1        // Because the pins are configured as open-drain, setting them high disables
  86   1        // their MOSFETs (which would otherwise pull down against their internal
  87   1        // pullup resistors and external pullups, if present) and lets the pullups
  88   1        // pull them high.
  89   1        // Then, when they are externally pulled low by the user pressing the tactile
  90   1        // switches, we will be able to read this as a change in this very same PORT3
  91   1        // register.
  92   1        P3 |= P3_BTN_BMASK;
  93   1      
  94   1        while (1)
  95   1          {
  96   2      // $[Generated Run-time code]
  97   2      // [Generated Run-time code]$
  98   2      
  99   2            // While any of the buttons are pressed, light the orange LED on P1.4 and
 100   2            // brighten the two PWM levels.
 101   2            if ((P3 & P3_BTN_BMASK) != P3_BTN_BMASK)
 102   2              {
 103   3                P1 |= P1_B4__BMASK;
 104   3                pwm_set(DEFAULT_PWM_CHANNEL0 << 2, DEFAULT_PWM_CHANNEL1 << 2);
 105   3              }
 106   2            else
 107   2              {
 108   3                P1 &= ~P1_B4__BMASK;
 109   3                pwm_set(DEFAULT_PWM_CHANNEL0, DEFAULT_PWM_CHANNEL1);
 110   3              }
 111   2          }
 112   1      }


C51 COMPILER V9.60.0.0   LAMP_MAIN                                                         02/12/2023 21:37:02 PAGE 3   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     73    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
